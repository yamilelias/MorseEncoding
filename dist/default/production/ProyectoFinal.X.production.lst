

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Wed May 11 19:17:34 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F4585
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           	psect	idataCOMRAM
    53  00BBDB                     __pidataCOMRAM:
    54                           	opt stack 0
    55                           
    56                           ;initializer for _tresSize
    57  00BBDB  09                 	db	9
    58                           
    59                           ;initializer for _unoSize
    60  00BBDC  09                 	db	9
    61                           
    62                           ;initializer for _unoMorse
    63  00BBDD  2E                 	db	46
    64  00BBDE  2D                 	db	45
    65  00BBDF  2D                 	db	45
    66  00BBE0  2D                 	db	45
    67  00BBE1  2D                 	db	45
    68  00BBE2  20                 	db	32
    69  00BBE3  00                 	db	0
    70  00BBE4  00                 	db	0
    71  00BBE5  00                 	db	0
    72                           
    73                           ;initializer for _ceroMorse
    74  00BBE6  2D                 	db	45
    75  00BBE7  2D                 	db	45
    76  00BBE8  2D                 	db	45
    77  00BBE9  2D                 	db	45
    78  00BBEA  2D                 	db	45
    79  00BBEB  20                 	db	32
    80  00BBEC  00                 	db	0
    81                           
    82                           ;initializer for _cincoMorse
    83  00BBED  2E                 	db	46
    84  00BBEE  2E                 	db	46
    85  00BBEF  2E                 	db	46
    86  00BBF0  2E                 	db	46
    87  00BBF1  2E                 	db	46
    88  00BBF2  20                 	db	32
    89  00BBF3  00                 	db	0
    90                           
    91                           ;initializer for _cuatroMorse
    92  00BBF4  2E                 	db	46
    93  00BBF5  2E                 	db	46
    94  00BBF6  2E                 	db	46
    95  00BBF7  2E                 	db	46
    96  00BBF8  2D                 	db	45
    97  00BBF9  20                 	db	32
    98  00BBFA  00                 	db	0
    99                           
   100                           ;initializer for _dosMorse
   101  00BBFB  2E                 	db	46
   102  00BBFC  2E                 	db	46
   103  00BBFD  2D                 	db	45
   104  00BBFE  2D                 	db	45
   105  00BBFF  2D                 	db	45
   106  00BC00  20                 	db	32
   107  00BC01  00                 	db	0
   108                           
   109                           ;initializer for _nueveMorse
   110  00BC02  2D                 	db	45
   111  00BC03  2D                 	db	45
   112  00BC04  2D                 	db	45
   113  00BC05  2D                 	db	45
   114  00BC06  2E                 	db	46
   115  00BC07  20                 	db	32
   116  00BC08  00                 	db	0
   117                           
   118                           ;initializer for _ochoMorse
   119  00BC09  2D                 	db	45
   120  00BC0A  2D                 	db	45
   121  00BC0B  2D                 	db	45
   122  00BC0C  2E                 	db	46
   123  00BC0D  2E                 	db	46
   124  00BC0E  20                 	db	32
   125  00BC0F  00                 	db	0
   126                           
   127                           ;initializer for _seisMorse
   128  00BC10  2D                 	db	45
   129  00BC11  2E                 	db	46
   130  00BC12  2E                 	db	46
   131  00BC13  2E                 	db	46
   132  00BC14  2E                 	db	46
   133  00BC15  20                 	db	32
   134  00BC16  00                 	db	0
   135                           
   136                           ;initializer for _sieteMorse
   137  00BC17  2D                 	db	45
   138  00BC18  2D                 	db	45
   139  00BC19  2E                 	db	46
   140  00BC1A  2E                 	db	46
   141  00BC1B  2E                 	db	46
   142  00BC1C  20                 	db	32
   143  00BC1D  00                 	db	0
   144                           
   145                           ;initializer for _SOS
   146  00BC1E  53                 	db	83
   147  00BC1F  4F                 	db	79
   148  00BC20  53                 	db	83
   149  00BC21  00                 	db	0
   150                           
   151                           	psect	idataBANK0
   152  00BA55                     __pidataBANK0:
   153                           	opt stack 0
   154                           
   155                           ;initializer for _CASTELLO
   156  00BA55  43                 	db	67
   157  00BA56  61                 	db	97
   158  00BA57  73                 	db	115
   159  00BA58  74                 	db	116
   160  00BA59  65                 	db	101
   161  00BA5A  6C                 	db	108
   162  00BA5B  6C                 	db	108
   163  00BA5C  6F                 	db	111
   164  00BA5D  20                 	db	32
   165  00BA5E  3C                 	db	60
   166  00BA5F  33                 	db	51
   167  00BA60  00                 	db	0
   168                           
   169                           ;initializer for _GREETING
   170  00BA61  48                 	db	72
   171  00BA62  65                 	db	101
   172  00BA63  6C                 	db	108
   173  00BA64  6C                 	db	108
   174  00BA65  6F                 	db	111
   175  00BA66  20                 	db	32
   176  00BA67  57                 	db	87
   177  00BA68  6F                 	db	111
   178  00BA69  72                 	db	114
   179  00BA6A  6C                 	db	108
   180  00BA6B  64                 	db	100
   181  00BA6C  00                 	db	0
   182                           
   183                           ;initializer for _SOSMorse
   184  00BA6D  2E                 	db	46
   185  00BA6E  2E                 	db	46
   186  00BA6F  2E                 	db	46
   187  00BA70  2D                 	db	45
   188  00BA71  2D                 	db	45
   189  00BA72  2D                 	db	45
   190  00BA73  2E                 	db	46
   191  00BA74  2E                 	db	46
   192  00BA75  2E                 	db	46
   193  00BA76  00                 	db	0
   194                           
   195                           ;initializer for _tresMorse
   196  00BA77  2E                 	db	46
   197  00BA78  2E                 	db	46
   198  00BA79  2E                 	db	46
   199  00BA7A  2D                 	db	45
   200  00BA7B  2D                 	db	45
   201  00BA7C  20                 	db	32
   202  00BA7D  00                 	db	0
   203  00BA7E  00                 	db	0
   204  00BA7F  00                 	db	0
   205  0000                     _ADCON1	set	4033
   206  0000                     _CMCON	set	4020
   207  0000                     _CVRCONbits	set	4021
   208  0000                     _INTCON2bits	set	4081
   209  0000                     _LATB	set	3978
   210  0000                     _LATC	set	3979
   211  0000                     _OSCCON	set	4051
   212  0000                     _PORTB	set	3969
   213  0000                     _PORTBbits	set	3969
   214  0000                     _PORTC	set	3970
   215  0000                     _PORTCbits	set	3970
   216  0000                     _PORTD	set	3971
   217  0000                     _PORTDbits	set	3971
   218  0000                     _TRISB	set	3987
   219  0000                     _TRISBbits	set	3987
   220  0000                     _TRISC	set	3988
   221  0000                     _TRISD	set	3989
   222                           
   223                           ; #config settings
   224  0000                     
   225                           	psect	cinit
   226  00BC72                     __pcinit:
   227                           	opt stack 0
   228  00BC72                     start_initialization:
   229                           	opt stack 0
   230  00BC72                     __initialization:
   231                           	opt stack 0
   232                           
   233                           ; Clear objects allocated to COMRAM (5 bytes)
   234  00BC72  6A58               	clrf	(__pbssCOMRAM+4)& (0+255),c
   235  00BC74  6A57               	clrf	(__pbssCOMRAM+3)& (0+255),c
   236  00BC76  6A56               	clrf	(__pbssCOMRAM+2)& (0+255),c
   237  00BC78  6A55               	clrf	(__pbssCOMRAM+1)& (0+255),c
   238  00BC7A  6A54               	clrf	__pbssCOMRAM& (0+255),c
   239                           
   240                           ; Initialize objects allocated to BANK0 (43 bytes)
   241                           ; load TBLPTR registers with __pidataBANK0
   242  00BC7C  0E55               	movlw	low __pidataBANK0
   243  00BC7E  6EF6               	movwf	tblptrl,c
   244  00BC80  0EBA               	movlw	high __pidataBANK0
   245  00BC82  6EF7               	movwf	tblptrh,c
   246  00BC84  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   247  00BC86  6EF8               	movwf	tblptru,c
   248  00BC88  EE00  F060         	lfsr	0,__pdataBANK0
   249  00BC8C  EE10 F02B          	lfsr	1,43
   250  00BC90                     copy_data0:
   251  00BC90  0009               	tblrd		*+
   252  00BC92  CFF5 FFEE          	movff	tablat,postinc0
   253  00BC96  50E5               	movf	postdec1,w,c
   254  00BC98  50E1               	movf	fsr1l,w,c
   255  00BC9A  E1FA               	bnz	copy_data0
   256                           
   257                           ; Initialize objects allocated to COMRAM (71 bytes)
   258                           ; load TBLPTR registers with __pidataCOMRAM
   259  00BC9C  0EDB               	movlw	low __pidataCOMRAM
   260  00BC9E  6EF6               	movwf	tblptrl,c
   261  00BCA0  0EBB               	movlw	high __pidataCOMRAM
   262  00BCA2  6EF7               	movwf	tblptrh,c
   263  00BCA4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   264  00BCA6  6EF8               	movwf	tblptru,c
   265  00BCA8  EE00  F001         	lfsr	0,__pdataCOMRAM
   266  00BCAC  EE10 F047          	lfsr	1,71
   267  00BCB0                     copy_data1:
   268  00BCB0  0009               	tblrd		*+
   269  00BCB2  CFF5 FFEE          	movff	tablat,postinc0
   270  00BCB6  50E5               	movf	postdec1,w,c
   271  00BCB8  50E1               	movf	fsr1l,w,c
   272  00BCBA  E1FA               	bnz	copy_data1
   273  00BCBC                     end_of_initialization:
   274                           	opt stack 0
   275  00BCBC                     __end_of__initialization:
   276                           	opt stack 0
   277  00BCBC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   278  00BCBE  6EF8               	movwf	tblptru,c
   279  00BCC0  0100               	movlb	0
   280  00BCC2  EF11  F05E         	goto	_main	;jump to C main() function
   281                           tblptru	equ	0xFF8
   282                           tblptrh	equ	0xFF7
   283                           tblptrl	equ	0xFF6
   284                           tablat	equ	0xFF5
   285                           postinc0	equ	0xFEE
   286                           postdec1	equ	0xFE5
   287                           fsr1l	equ	0xFE1
   288                           
   289                           	psect	bssCOMRAM
   290  000054                     __pbssCOMRAM:
   291                           	opt stack 0
   292  000054                     _DDRAMAddress:
   293                           	opt stack 0
   294  000054                     	ds	1
   295  000055                     _columnSelected:
   296                           	opt stack 0
   297  000055                     	ds	1
   298  000056                     _keyCode:
   299                           	opt stack 0
   300  000056                     	ds	1
   301  000057                     _oneShotFlag:
   302                           	opt stack 0
   303  000057                     	ds	1
   304  000058                     _rowSelected:
   305                           	opt stack 0
   306  000058                     	ds	1
   307                           tblptru	equ	0xFF8
   308                           tblptrh	equ	0xFF7
   309                           tblptrl	equ	0xFF6
   310                           tablat	equ	0xFF5
   311                           postinc0	equ	0xFEE
   312                           postdec1	equ	0xFE5
   313                           fsr1l	equ	0xFE1
   314                           
   315                           	psect	dataCOMRAM
   316  000001                     __pdataCOMRAM:
   317                           	opt stack 0
   318  000001                     _tresSize:
   319                           	opt stack 0
   320  000001                     	ds	1
   321  000002                     _unoSize:
   322                           	opt stack 0
   323  000002                     	ds	1
   324  000003                     _unoMorse:
   325                           	opt stack 0
   326  000003                     	ds	9
   327  00000C                     _ceroMorse:
   328                           	opt stack 0
   329  00000C                     	ds	7
   330  000013                     _cincoMorse:
   331                           	opt stack 0
   332  000013                     	ds	7
   333  00001A                     _cuatroMorse:
   334                           	opt stack 0
   335  00001A                     	ds	7
   336  000021                     _dosMorse:
   337                           	opt stack 0
   338  000021                     	ds	7
   339  000028                     _nueveMorse:
   340                           	opt stack 0
   341  000028                     	ds	7
   342  00002F                     _ochoMorse:
   343                           	opt stack 0
   344  00002F                     	ds	7
   345  000036                     _seisMorse:
   346                           	opt stack 0
   347  000036                     	ds	7
   348  00003D                     _sieteMorse:
   349                           	opt stack 0
   350  00003D                     	ds	7
   351  000044                     _SOS:
   352                           	opt stack 0
   353  000044                     	ds	4
   354                           tblptru	equ	0xFF8
   355                           tblptrh	equ	0xFF7
   356                           tblptrl	equ	0xFF6
   357                           tablat	equ	0xFF5
   358                           postinc0	equ	0xFEE
   359                           postdec1	equ	0xFE5
   360                           fsr1l	equ	0xFE1
   361                           
   362                           	psect	dataBANK0
   363  000060                     __pdataBANK0:
   364                           	opt stack 0
   365  000060                     _CASTELLO:
   366                           	opt stack 0
   367  000060                     	ds	12
   368  00006C                     _GREETING:
   369                           	opt stack 0
   370  00006C                     	ds	12
   371  000078                     _SOSMorse:
   372                           	opt stack 0
   373  000078                     	ds	10
   374  000082                     _tresMorse:
   375                           	opt stack 0
   376  000082                     	ds	9
   377                           tblptru	equ	0xFF8
   378                           tblptrh	equ	0xFF7
   379                           tblptrl	equ	0xFF6
   380                           tablat	equ	0xFF5
   381                           postinc0	equ	0xFEE
   382                           postdec1	equ	0xFE5
   383                           fsr1l	equ	0xFE1
   384                           
   385                           	psect	cstackCOMRAM
   386  000048                     __pcstackCOMRAM:
   387                           	opt stack 0
   388  000048                     ??_shortBuzzerDelay:
   389  000048                     ??_longBuzzerDelay:
   390  000048                     ??_delay:
   391  000048                     ?_strlen:
   392                           	opt stack 0
   393  000048                     shortDelay@L1REG:
   394                           	opt stack 0
   395  000048                     longDelay@L1REG:
   396                           	opt stack 0
   397  000048                     determinePressedRow@i:
   398                           	opt stack 0
   399  000048                     strlen@s:
   400                           	opt stack 0
   401                           
   402                           ; 2 bytes @ 0x0
   403  000048                     	ds	1
   404  000049                     longDelay@L2REG:
   405                           	opt stack 0
   406  000049                     command@x:
   407                           	opt stack 0
   408  000049                     displayCharOnLCD@character:
   409                           	opt stack 0
   410  000049                     shortBuzzerDelay@L3REG:
   411                           	opt stack 0
   412  000049                     longBuzzerDelay@L3REG:
   413                           	opt stack 0
   414  000049                     delay@L1REG:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0x1
   418  000049                     	ds	1
   419  00004A                     ??_strlen:
   420  00004A                     longDelay@L3REG:
   421                           	opt stack 0
   422  00004A                     shortBuzzerDelay@L1REG:
   423                           	opt stack 0
   424  00004A                     longBuzzerDelay@L1REG:
   425                           	opt stack 0
   426  00004A                     delay@L2REG:
   427                           	opt stack 0
   428  00004A                     displayLineOnLCD@array:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0x2
   432  00004A                     	ds	1
   433  00004B                     shortBuzzerDelay@L2REG:
   434                           	opt stack 0
   435  00004B                     longBuzzerDelay@L2REG:
   436                           	opt stack 0
   437                           
   438                           ; 1 bytes @ 0x3
   439  00004B                     	ds	1
   440  00004C                     displayLineOnLCD@sizeOfArray:
   441                           	opt stack 0
   442  00004C                     strlen@cp:
   443                           	opt stack 0
   444                           
   445                           ; 2 bytes @ 0x4
   446  00004C                     	ds	1
   447  00004D                     displayLineOnLCD@i:
   448                           	opt stack 0
   449                           
   450                           ; 1 bytes @ 0x5
   451  00004D                     	ds	1
   452  00004E                     decode@caracter:
   453                           	opt stack 0
   454                           
   455                           ; 2 bytes @ 0x6
   456  00004E                     	ds	2
   457  000050                     ??_decode:
   458                           
   459                           ; 1 bytes @ 0x8
   460  000050                     	ds	2
   461  000052                     decode@i:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0xA
   465  000052                     	ds	1
   466  000053                     pressedKeyAction@keyCode:
   467                           	opt stack 0
   468                           
   469                           ; 1 bytes @ 0xB
   470  000053                     	ds	1
   471  000054                     tblptru	equ	0xFF8
   472                           tblptrh	equ	0xFF7
   473                           tblptrl	equ	0xFF6
   474                           tablat	equ	0xFF5
   475                           postinc0	equ	0xFEE
   476                           postdec1	equ	0xFE5
   477                           fsr1l	equ	0xFE1
   478                           
   479                           ; 1 bytes @ 0xC
   480 ;;
   481 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   482 ;;
   483 ;; *************** function _main *****************
   484 ;; Defined at:
   485 ;;		line 57 in file "main.c"
   486 ;; Parameters:    Size  Location     Type
   487 ;;		None
   488 ;; Auto vars:     Size  Location     Type
   489 ;;		None
   490 ;; Return value:  Size  Location     Type
   491 ;;                  1    wreg      void 
   492 ;; Registers used:
   493 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   494 ;; Tracked objects:
   495 ;;		On entry : 0/0
   496 ;;		On exit  : 0/0
   497 ;;		Unchanged: 0/0
   498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   502 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   503 ;;Total ram usage:        0 bytes
   504 ;; Hardware stack levels required when called:    8
   505 ;; This function calls:
   506 ;;		_LCDSetup
   507 ;;		_groundAllRows
   508 ;;		_oneShot
   509 ;;		_portDAsOutput
   510 ;;		_resetOneShot
   511 ;; This function is called by:
   512 ;;		Startup code after reset
   513 ;; This function uses a non-reentrant model
   514 ;;
   515                           
   516                           	psect	text0
   517  00BC22                     __ptext0:
   518                           	opt stack 0
   519  00BC22                     _main:
   520                           	opt stack 23
   521                           
   522                           ;main.c: 60: OSCCON = 0x60;
   523                           
   524                           ;incstack = 0
   525  00BC22  0E60               	movlw	96
   526  00BC24  6ED3               	movwf	4051,c	;volatile
   527                           
   528                           ;main.c: 64: CMCON = 0x07;
   529  00BC26  0E07               	movlw	7
   530  00BC28  6EB4               	movwf	4020,c	;volatile
   531                           
   532                           ;main.c: 65: CVRCONbits.CVREN = 0;
   533  00BC2A  9EB5               	bcf	4021,7,c	;volatile
   534                           
   535                           ;main.c: 66: ADCON1 = 0x0F;
   536  00BC2C  0E0F               	movlw	15
   537  00BC2E  6EC1               	movwf	4033,c	;volatile
   538                           
   539                           ;main.c: 69: INTCON2bits.RBPU = 0;
   540  00BC30  9EF1               	bcf	intcon2,7,c	;volatile
   541                           
   542                           ;main.c: 71: PORTB = 0X00;
   543  00BC32  0E00               	movlw	0
   544  00BC34  6E81               	movwf	3969,c	;volatile
   545                           
   546                           ;main.c: 72: LATB = 0X00;
   547  00BC36  0E00               	movlw	0
   548  00BC38  6E8A               	movwf	3978,c	;volatile
   549                           
   550                           ;main.c: 73: TRISB = 0XFF;
   551  00BC3A  6893               	setf	3987,c	;volatile
   552                           
   553                           ;main.c: 75: PORTC = 0X00;
   554  00BC3C  0E00               	movlw	0
   555  00BC3E  6E82               	movwf	3970,c	;volatile
   556                           
   557                           ;main.c: 76: LATC = 0X00;
   558  00BC40  0E00               	movlw	0
   559  00BC42  6E8B               	movwf	3979,c	;volatile
   560                           
   561                           ;main.c: 77: TRISC = 0X00;
   562  00BC44  0E00               	movlw	0
   563  00BC46  6E94               	movwf	3988,c	;volatile
   564                           
   565                           ;main.c: 80: TRISBbits.RB0 = 0;
   566  00BC48  9093               	bcf	3987,0,c	;volatile
   567                           
   568                           ;main.c: 81: TRISBbits.RB1 = 0;
   569  00BC4A  9293               	bcf	3987,1,c	;volatile
   570                           
   571                           ;main.c: 82: TRISBbits.RB2 = 0;
   572  00BC4C  9493               	bcf	3987,2,c	;volatile
   573                           
   574                           ;main.c: 83: TRISBbits.RB3 = 0;
   575  00BC4E  9693               	bcf	3987,3,c	;volatile
   576                           
   577                           ;main.c: 86: portDAsOutput();
   578  00BC50  EC22  F05C         	call	_portDAsOutput	;wreg free
   579                           
   580                           ;main.c: 89: LCDSetup();
   581  00BC54  EC03  F05D         	call	_LCDSetup	;wreg free
   582  00BC58                     l1862:
   583                           
   584                           ;main.c: 93: groundAllRows();
   585  00BC58  EC25  F05C         	call	_groundAllRows	;wreg free
   586                           
   587                           ;main.c: 95: if(PORTB != 0xF0){
   588  00BC5C  0EF0               	movlw	240
   589  00BC5E  1881               	xorwf	3969,w,c	;volatile
   590  00BC60  A4D8               	btfss	status,2,c
   591                           
   592                           ;main.c: 96: oneShot();
   593  00BC62  ECE5  F05C         	call	_oneShot	;wreg free
   594                           
   595                           ;main.c: 97: }
   596                           ;main.c: 98: if(oneShotFlag == 1){
   597  00BC66  0457               	decf	_oneShotFlag,w,c
   598  00BC68  A4D8               	btfss	status,2,c
   599  00BC6A  D7F6               	goto	l1862
   600                           
   601                           ;main.c: 99: resetOneShot();
   602  00BC6C  ECBC  F05C         	call	_resetOneShot	;wreg free
   603  00BC70  D7F3               	goto	l1862
   604  00BC72                     __end_of_main:
   605                           	opt stack 0
   606                           tblptru	equ	0xFF8
   607                           tblptrh	equ	0xFF7
   608                           tblptrl	equ	0xFF6
   609                           tablat	equ	0xFF5
   610                           intcon2	equ	0xFF1
   611                           postinc0	equ	0xFEE
   612                           postdec1	equ	0xFE5
   613                           fsr1l	equ	0xFE1
   614                           status	equ	0xFD8
   615                           
   616 ;; *************** function _resetOneShot *****************
   617 ;; Defined at:
   618 ;;		line 60 in file "matrix_keyboard.c"
   619 ;; Parameters:    Size  Location     Type
   620 ;;		None
   621 ;; Auto vars:     Size  Location     Type
   622 ;;		None
   623 ;; Return value:  Size  Location     Type
   624 ;;                  1    wreg      void 
   625 ;; Registers used:
   626 ;;		wreg, status,2, status,0, cstack
   627 ;; Tracked objects:
   628 ;;		On entry : 0/0
   629 ;;		On exit  : 0/0
   630 ;;		Unchanged: 0/0
   631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   636 ;;Total ram usage:        0 bytes
   637 ;; Hardware stack levels used:    1
   638 ;; Hardware stack levels required when called:    1
   639 ;; This function calls:
   640 ;;		_delay
   641 ;; This function is called by:
   642 ;;		_main
   643 ;; This function uses a non-reentrant model
   644 ;;
   645                           
   646                           	psect	text1
   647  00B978                     __ptext1:
   648                           	opt stack 0
   649  00B978                     _resetOneShot:
   650                           	opt stack 29
   651                           
   652                           ;matrix_keyboard.c: 61: if (PORTB == 0xF0)
   653                           
   654                           ;incstack = 0
   655  00B978  0EF0               	movlw	240
   656  00B97A  1881               	xorwf	3969,w,c	;volatile
   657  00B97C  A4D8               	btfss	status,2,c
   658  00B97E  0012               	return	
   659                           
   660                           ;matrix_keyboard.c: 62: delay();
   661  00B980  ECD7  F05C         	call	_delay	;wreg free
   662                           
   663                           ;matrix_keyboard.c: 65: if (PORTB == 0XF0){
   664                           
   665                           ;matrix_keyboard.c: 63: else
   666                           ;matrix_keyboard.c: 64: return;
   667  00B984  0EF0               	movlw	240
   668  00B986  1881               	xorwf	3969,w,c	;volatile
   669  00B988  A4D8               	btfss	status,2,c
   670  00B98A  0012               	return	
   671                           
   672                           ;matrix_keyboard.c: 67: oneShotFlag = 0;
   673  00B98C  0E00               	movlw	0
   674  00B98E  6E57               	movwf	_oneShotFlag,c
   675  00B990  0012               	return	
   676  00B992                     __end_of_resetOneShot:
   677                           	opt stack 0
   678                           tblptru	equ	0xFF8
   679                           tblptrh	equ	0xFF7
   680                           tblptrl	equ	0xFF6
   681                           tablat	equ	0xFF5
   682                           intcon2	equ	0xFF1
   683                           postinc0	equ	0xFEE
   684                           postdec1	equ	0xFE5
   685                           fsr1l	equ	0xFE1
   686                           status	equ	0xFD8
   687                           
   688 ;; *************** function _oneShot *****************
   689 ;; Defined at:
   690 ;;		line 50 in file "matrix_keyboard.c"
   691 ;; Parameters:    Size  Location     Type
   692 ;;		None
   693 ;; Auto vars:     Size  Location     Type
   694 ;;		None
   695 ;; Return value:  Size  Location     Type
   696 ;;                  1    wreg      void 
   697 ;; Registers used:
   698 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   699 ;; Tracked objects:
   700 ;;		On entry : 0/0
   701 ;;		On exit  : 0/0
   702 ;;		Unchanged: 0/0
   703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   707 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   708 ;;Total ram usage:        0 bytes
   709 ;; Hardware stack levels used:    1
   710 ;; Hardware stack levels required when called:    7
   711 ;; This function calls:
   712 ;;		_delay
   713 ;;		_pressedKey
   714 ;; This function is called by:
   715 ;;		_main
   716 ;; This function uses a non-reentrant model
   717 ;;
   718                           
   719                           	psect	text2
   720  00B9CA                     __ptext2:
   721                           	opt stack 0
   722  00B9CA                     _oneShot:
   723                           	opt stack 23
   724                           
   725                           ;matrix_keyboard.c: 51: if (oneShotFlag == 1)
   726                           
   727                           ;incstack = 0
   728  00B9CA  0457               	decf	_oneShotFlag,w,c
   729  00B9CC  B4D8               	btfsc	status,2,c
   730  00B9CE  0012               	return	
   731                           
   732                           ;matrix_keyboard.c: 53: delay();
   733                           
   734                           ;matrix_keyboard.c: 52: return;
   735  00B9D0  ECD7  F05C         	call	_delay	;wreg free
   736                           
   737                           ;matrix_keyboard.c: 54: if (PORTB != 0xF0){
   738  00B9D4  0EF0               	movlw	240
   739  00B9D6  1881               	xorwf	3969,w,c	;volatile
   740  00B9D8  B4D8               	btfsc	status,2,c
   741  00B9DA  0012               	return	
   742                           
   743                           ;matrix_keyboard.c: 55: pressedKey();
   744  00B9DC  ECCA  F05D         	call	_pressedKey	;wreg free
   745                           
   746                           ;matrix_keyboard.c: 56: oneShotFlag = 1;
   747  00B9E0  0E01               	movlw	1
   748  00B9E2  6E57               	movwf	_oneShotFlag,c
   749  00B9E4  0012               	return	
   750  00B9E6                     __end_of_oneShot:
   751                           	opt stack 0
   752                           tblptru	equ	0xFF8
   753                           tblptrh	equ	0xFF7
   754                           tblptrl	equ	0xFF6
   755                           tablat	equ	0xFF5
   756                           intcon2	equ	0xFF1
   757                           postinc0	equ	0xFEE
   758                           postdec1	equ	0xFE5
   759                           fsr1l	equ	0xFE1
   760                           status	equ	0xFD8
   761                           
   762 ;; *************** function _pressedKey *****************
   763 ;; Defined at:
   764 ;;		line 234 in file "matrix_keyboard.c"
   765 ;; Parameters:    Size  Location     Type
   766 ;;		None
   767 ;; Auto vars:     Size  Location     Type
   768 ;;		None
   769 ;; Return value:  Size  Location     Type
   770 ;;                  1    wreg      void 
   771 ;; Registers used:
   772 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   773 ;; Tracked objects:
   774 ;;		On entry : 0/0
   775 ;;		On exit  : 0/0
   776 ;;		Unchanged: 0/0
   777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   781 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   782 ;;Total ram usage:        0 bytes
   783 ;; Hardware stack levels used:    1
   784 ;; Hardware stack levels required when called:    6
   785 ;; This function calls:
   786 ;;		_determinePressedRow
   787 ;;		_getKeyCode
   788 ;;		_pressedKeyAction
   789 ;; This function is called by:
   790 ;;		_oneShot
   791 ;; This function uses a non-reentrant model
   792 ;;
   793                           
   794                           	psect	text3
   795  00BB94                     __ptext3:
   796                           	opt stack 0
   797  00BB94                     _pressedKey:
   798                           	opt stack 23
   799                           
   800                           ;matrix_keyboard.c: 235: switch(PORTB){
   801                           
   802                           ;incstack = 0
   803  00BB94  D00B               	goto	l1820
   804  00BB96                     l1810:
   805  00BB96  0E01               	movlw	1
   806  00BB98  D007               	goto	L4
   807  00BB9A                     l1812:
   808  00BB9A  0E02               	movlw	2
   809  00BB9C  D005               	goto	L4
   810  00BB9E                     l1814:
   811  00BB9E  0E03               	movlw	3
   812  00BBA0  D003               	goto	L4
   813  00BBA2                     l1816:
   814  00BBA2  0E04               	movlw	4
   815  00BBA4  D001               	goto	L4
   816  00BBA6                     l1818:
   817  00BBA6  0E64               	movlw	100
   818  00BBA8                     L4:
   819  00BBA8  6E55               	movwf	_columnSelected,c
   820                           
   821                           ;matrix_keyboard.c: 241: }
   822  00BBAA  D00E               	goto	l1822
   823  00BBAC                     l1820:
   824  00BBAC  5081               	movf	3969,w,c	;volatile
   825                           
   826                           ; Switch size 1, requested type "space"
   827                           ; Number of cases is 4, Range of values is 112 to 224
   828                           ; switch strategies available:
   829                           ; Name         Instructions Cycles
   830                           ; simple_byte           13     7 (average)
   831                           ;	Chosen strategy is simple_byte
   832  00BBAE  0A70               	xorlw	112	; case 112
   833  00BBB0  B4D8               	btfsc	status,2,c
   834  00BBB2  D7F7               	goto	l1816
   835  00BBB4  0AC0               	xorlw	192	; case 176
   836  00BBB6  B4D8               	btfsc	status,2,c
   837  00BBB8  D7F2               	goto	l1814
   838  00BBBA  0A60               	xorlw	96	; case 208
   839  00BBBC  B4D8               	btfsc	status,2,c
   840  00BBBE  D7ED               	goto	l1812
   841  00BBC0  0A30               	xorlw	48	; case 224
   842  00BBC2  B4D8               	btfsc	status,2,c
   843  00BBC4  D7E8               	goto	l1810
   844  00BBC6  D7EF               	goto	l1818
   845  00BBC8                     l1822:
   846                           
   847                           ;matrix_keyboard.c: 242: determinePressedRow();
   848  00BBC8  EC6B  F05F         	call	_determinePressedRow	;wreg free
   849                           
   850                           ;matrix_keyboard.c: 243: keyCode = getKeyCode();
   851  00BBCC  ECFF  F05E         	call	_getKeyCode	;wreg free
   852  00BBD0  6E56               	movwf	_keyCode,c
   853                           
   854                           ;matrix_keyboard.c: 244: pressedKeyAction(keyCode);
   855  00BBD2  5056               	movf	_keyCode,w,c
   856  00BBD4  ECAA  F05E         	call	_pressedKeyAction
   857  00BBD8  0012               	return		;funcret
   858  00BBDA                     __end_of_pressedKey:
   859                           	opt stack 0
   860                           tblptru	equ	0xFF8
   861                           tblptrh	equ	0xFF7
   862                           tblptrl	equ	0xFF6
   863                           tablat	equ	0xFF5
   864                           intcon2	equ	0xFF1
   865                           postinc0	equ	0xFEE
   866                           postdec1	equ	0xFE5
   867                           fsr1l	equ	0xFE1
   868                           status	equ	0xFD8
   869                           
   870 ;; *************** function _pressedKeyAction *****************
   871 ;; Defined at:
   872 ;;		line 213 in file "matrix_keyboard.c"
   873 ;; Parameters:    Size  Location     Type
   874 ;;  keyCode         1    wreg     unsigned char 
   875 ;; Auto vars:     Size  Location     Type
   876 ;;  keyCode         1   11[COMRAM] unsigned char 
   877 ;; Return value:  Size  Location     Type
   878 ;;                  1    wreg      void 
   879 ;; Registers used:
   880 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   881 ;; Tracked objects:
   882 ;;		On entry : 0/0
   883 ;;		On exit  : 0/0
   884 ;;		Unchanged: 0/0
   885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   887 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   889 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   890 ;;Total ram usage:        1 bytes
   891 ;; Hardware stack levels used:    1
   892 ;; Hardware stack levels required when called:    5
   893 ;; This function calls:
   894 ;;		_command
   895 ;;		_displayCharOnLCD
   896 ;;		_displayEight
   897 ;;		_displayFive
   898 ;;		_displayFour
   899 ;;		_displayNine
   900 ;;		_displayOne
   901 ;;		_displaySOS
   902 ;;		_displaySeven
   903 ;;		_displaySix
   904 ;;		_displayThree
   905 ;;		_displayTwo
   906 ;;		_displayZero
   907 ;;		_isReady
   908 ;; This function is called by:
   909 ;;		_pressedKey
   910 ;; This function uses a non-reentrant model
   911 ;;
   912                           
   913                           	psect	text4
   914  00BD54                     __ptext4:
   915                           	opt stack 0
   916  00BD54                     _pressedKeyAction:
   917                           	opt stack 23
   918                           
   919                           ;incstack = 0
   920                           ;pressedKeyAction@keyCode stored from wreg
   921  00BD54  6E53               	movwf	pressedKeyAction@keyCode,c
   922                           
   923                           ;matrix_keyboard.c: 214: switch(keyCode){
   924  00BD56  D02D               	goto	l1806
   925  00BD58                     l1778:
   926  00BD58  EC80  F05C         	call	_displayOne	;wreg free
   927  00BD5C  0012               	return	
   928  00BD5E                     l1780:
   929  00BD5E  ECA8  F05C         	call	_displayTwo	;wreg free
   930  00BD62  0012               	return	
   931  00BD64                     l1782:
   932  00BD64  EC9E  F05C         	call	_displayThree	;wreg free
   933  00BD68  0012               	return	
   934  00BD6A                     l1784:
   935  00BD6A  EC6C  F05C         	call	_displayFour	;wreg free
   936  00BD6E  0012               	return	
   937  00BD70                     l1786:
   938  00BD70  EC62  F05C         	call	_displayFive	;wreg free
   939  00BD74  0012               	return	
   940  00BD76                     l1788:
   941  00BD76  EC94  F05C         	call	_displaySix	;wreg free
   942  00BD7A  0012               	return	
   943  00BD7C                     l1790:
   944  00BD7C  EC8A  F05C         	call	_displaySeven	;wreg free
   945  00BD80  0012               	return	
   946  00BD82                     l1792:
   947  00BD82  EC58  F05C         	call	_displayEight	;wreg free
   948  00BD86  0012               	return	
   949  00BD88                     l1794:
   950  00BD88  EC76  F05C         	call	_displayNine	;wreg free
   951  00BD8C  0012               	return	
   952  00BD8E                     l1796:
   953  00BD8E  ECB2  F05C         	call	_displayZero	;wreg free
   954  00BD92  0012               	return	
   955  00BD94                     l1798:
   956  00BD94  0E01               	movlw	1
   957  00BD96  EC44  F05C         	call	_command
   958  00BD9A  ECC9  F05C         	call	_isReady	;wreg free
   959  00BD9E  0E00               	movlw	0
   960  00BDA0  6E54               	movwf	_DDRAMAddress,c
   961  00BDA2  0012               	return	
   962  00BDA4                     l1802:
   963  00BDA4  EC57  F05D         	call	_displaySOS	;wreg free
   964  00BDA8  0012               	return	
   965  00BDAA                     l1804:
   966  00BDAA  5053               	movf	pressedKeyAction@keyCode,w,c
   967  00BDAC  EC4E  F05C         	call	_displayCharOnLCD
   968                           
   969                           ;matrix_keyboard.c: 231: }
   970  00BDB0  0012               	return	
   971  00BDB2                     l1806:
   972  00BDB2  5053               	movf	pressedKeyAction@keyCode,w,c
   973                           
   974                           ; Switch size 1, requested type "space"
   975                           ; Number of cases is 12, Range of values is 35 to 57
   976                           ; switch strategies available:
   977                           ; Name         Instructions Cycles
   978                           ; simple_byte           37    19 (average)
   979                           ;	Chosen strategy is simple_byte
   980  00BDB4  0A23               	xorlw	35	; case 35
   981  00BDB6  B4D8               	btfsc	status,2,c
   982  00BDB8  D7F5               	goto	l1802
   983  00BDBA  0A09               	xorlw	9	; case 42
   984  00BDBC  B4D8               	btfsc	status,2,c
   985  00BDBE  D7EA               	goto	l1798
   986  00BDC0  0A1A               	xorlw	26	; case 48
   987  00BDC2  B4D8               	btfsc	status,2,c
   988  00BDC4  D7E4               	goto	l1796
   989  00BDC6  0A01               	xorlw	1	; case 49
   990  00BDC8  B4D8               	btfsc	status,2,c
   991  00BDCA  D7C6               	goto	l1778
   992  00BDCC  0A03               	xorlw	3	; case 50
   993  00BDCE  B4D8               	btfsc	status,2,c
   994  00BDD0  D7C6               	goto	l1780
   995  00BDD2  0A01               	xorlw	1	; case 51
   996  00BDD4  B4D8               	btfsc	status,2,c
   997  00BDD6  D7C6               	goto	l1782
   998  00BDD8  0A07               	xorlw	7	; case 52
   999  00BDDA  B4D8               	btfsc	status,2,c
  1000  00BDDC  D7C6               	goto	l1784
  1001  00BDDE  0A01               	xorlw	1	; case 53
  1002  00BDE0  B4D8               	btfsc	status,2,c
  1003  00BDE2  D7C6               	goto	l1786
  1004  00BDE4  0A03               	xorlw	3	; case 54
  1005  00BDE6  B4D8               	btfsc	status,2,c
  1006  00BDE8  D7C6               	goto	l1788
  1007  00BDEA  0A01               	xorlw	1	; case 55
  1008  00BDEC  B4D8               	btfsc	status,2,c
  1009  00BDEE  D7C6               	goto	l1790
  1010  00BDF0  0A0F               	xorlw	15	; case 56
  1011  00BDF2  B4D8               	btfsc	status,2,c
  1012  00BDF4  D7C6               	goto	l1792
  1013  00BDF6  0A01               	xorlw	1	; case 57
  1014  00BDF8  B4D8               	btfsc	status,2,c
  1015  00BDFA  D7C6               	goto	l1794
  1016  00BDFC  D7D6               	goto	l1804
  1017  00BDFE                     __end_of_pressedKeyAction:
  1018                           	opt stack 0
  1019                           tblptru	equ	0xFF8
  1020                           tblptrh	equ	0xFF7
  1021                           tblptrl	equ	0xFF6
  1022                           tablat	equ	0xFF5
  1023                           intcon2	equ	0xFF1
  1024                           postinc0	equ	0xFEE
  1025                           postdec1	equ	0xFE5
  1026                           fsr1l	equ	0xFE1
  1027                           status	equ	0xFD8
  1028                           
  1029 ;; *************** function _displayZero *****************
  1030 ;; Defined at:
  1031 ;;		line 106 in file "morse.c"
  1032 ;; Parameters:    Size  Location     Type
  1033 ;;		None
  1034 ;; Auto vars:     Size  Location     Type
  1035 ;;		None
  1036 ;; Return value:  Size  Location     Type
  1037 ;;                  1    wreg      void 
  1038 ;; Registers used:
  1039 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1040 ;; Tracked objects:
  1041 ;;		On entry : 0/0
  1042 ;;		On exit  : 0/0
  1043 ;;		Unchanged: 0/0
  1044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1048 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1049 ;;Total ram usage:        0 bytes
  1050 ;; Hardware stack levels used:    1
  1051 ;; Hardware stack levels required when called:    4
  1052 ;; This function calls:
  1053 ;;		_decode
  1054 ;;		_displayCharOnLCD
  1055 ;; This function is called by:
  1056 ;;		_pressedKeyAction
  1057 ;; This function uses a non-reentrant model
  1058 ;;
  1059                           
  1060                           	psect	text5
  1061  00B964                     __ptext5:
  1062                           	opt stack 0
  1063  00B964                     _displayZero:
  1064                           	opt stack 23
  1065                           
  1066                           ;morse.c: 107: displayCharOnLCD(keyCode);
  1067                           
  1068                           ;incstack = 0
  1069  00B964  5056               	movf	_keyCode,w,c
  1070  00B966  EC4E  F05C         	call	_displayCharOnLCD
  1071                           
  1072                           ;morse.c: 108: decode(ceroMorse);
  1073  00B96A  0E0C               	movlw	low _ceroMorse
  1074  00B96C  6E4E               	movwf	decode@caracter,c
  1075  00B96E  0E00               	movlw	high _ceroMorse
  1076  00B970  6E4F               	movwf	decode@caracter+1,c
  1077  00B972  EC63  F05E         	call	_decode	;wreg free
  1078  00B976  0012               	return		;funcret
  1079  00B978                     __end_of_displayZero:
  1080                           	opt stack 0
  1081                           tblptru	equ	0xFF8
  1082                           tblptrh	equ	0xFF7
  1083                           tblptrl	equ	0xFF6
  1084                           tablat	equ	0xFF5
  1085                           intcon2	equ	0xFF1
  1086                           postinc0	equ	0xFEE
  1087                           postdec1	equ	0xFE5
  1088                           fsr1l	equ	0xFE1
  1089                           status	equ	0xFD8
  1090                           
  1091 ;; *************** function _displayTwo *****************
  1092 ;; Defined at:
  1093 ;;		line 66 in file "morse.c"
  1094 ;; Parameters:    Size  Location     Type
  1095 ;;		None
  1096 ;; Auto vars:     Size  Location     Type
  1097 ;;		None
  1098 ;; Return value:  Size  Location     Type
  1099 ;;                  1    wreg      void 
  1100 ;; Registers used:
  1101 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1102 ;; Tracked objects:
  1103 ;;		On entry : 0/0
  1104 ;;		On exit  : 0/0
  1105 ;;		Unchanged: 0/0
  1106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1111 ;;Total ram usage:        0 bytes
  1112 ;; Hardware stack levels used:    1
  1113 ;; Hardware stack levels required when called:    4
  1114 ;; This function calls:
  1115 ;;		_decode
  1116 ;;		_displayCharOnLCD
  1117 ;; This function is called by:
  1118 ;;		_pressedKeyAction
  1119 ;; This function uses a non-reentrant model
  1120 ;;
  1121                           
  1122                           	psect	text6
  1123  00B950                     __ptext6:
  1124                           	opt stack 0
  1125  00B950                     _displayTwo:
  1126                           	opt stack 23
  1127                           
  1128                           ;morse.c: 67: displayCharOnLCD(keyCode);
  1129                           
  1130                           ;incstack = 0
  1131  00B950  5056               	movf	_keyCode,w,c
  1132  00B952  EC4E  F05C         	call	_displayCharOnLCD
  1133                           
  1134                           ;morse.c: 68: decode(dosMorse);
  1135  00B956  0E21               	movlw	low _dosMorse
  1136  00B958  6E4E               	movwf	decode@caracter,c
  1137  00B95A  0E00               	movlw	high _dosMorse
  1138  00B95C  6E4F               	movwf	decode@caracter+1,c
  1139  00B95E  EC63  F05E         	call	_decode	;wreg free
  1140  00B962  0012               	return		;funcret
  1141  00B964                     __end_of_displayTwo:
  1142                           	opt stack 0
  1143                           tblptru	equ	0xFF8
  1144                           tblptrh	equ	0xFF7
  1145                           tblptrl	equ	0xFF6
  1146                           tablat	equ	0xFF5
  1147                           intcon2	equ	0xFF1
  1148                           postinc0	equ	0xFEE
  1149                           postdec1	equ	0xFE5
  1150                           fsr1l	equ	0xFE1
  1151                           status	equ	0xFD8
  1152                           
  1153 ;; *************** function _displayThree *****************
  1154 ;; Defined at:
  1155 ;;		line 71 in file "morse.c"
  1156 ;; Parameters:    Size  Location     Type
  1157 ;;		None
  1158 ;; Auto vars:     Size  Location     Type
  1159 ;;		None
  1160 ;; Return value:  Size  Location     Type
  1161 ;;                  1    wreg      void 
  1162 ;; Registers used:
  1163 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1164 ;; Tracked objects:
  1165 ;;		On entry : 0/0
  1166 ;;		On exit  : 0/0
  1167 ;;		Unchanged: 0/0
  1168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1173 ;;Total ram usage:        0 bytes
  1174 ;; Hardware stack levels used:    1
  1175 ;; Hardware stack levels required when called:    4
  1176 ;; This function calls:
  1177 ;;		_decode
  1178 ;;		_displayCharOnLCD
  1179 ;; This function is called by:
  1180 ;;		_pressedKeyAction
  1181 ;; This function uses a non-reentrant model
  1182 ;;
  1183                           
  1184                           	psect	text7
  1185  00B93C                     __ptext7:
  1186                           	opt stack 0
  1187  00B93C                     _displayThree:
  1188                           	opt stack 23
  1189                           
  1190                           ;morse.c: 72: displayCharOnLCD(keyCode);
  1191                           
  1192                           ;incstack = 0
  1193  00B93C  5056               	movf	_keyCode,w,c
  1194  00B93E  EC4E  F05C         	call	_displayCharOnLCD
  1195                           
  1196                           ;morse.c: 73: decode(tresMorse);
  1197  00B942  0E82               	movlw	low _tresMorse
  1198  00B944  6E4E               	movwf	decode@caracter,c
  1199  00B946  0E00               	movlw	high _tresMorse
  1200  00B948  6E4F               	movwf	decode@caracter+1,c
  1201  00B94A  EC63  F05E         	call	_decode	;wreg free
  1202  00B94E  0012               	return		;funcret
  1203  00B950                     __end_of_displayThree:
  1204                           	opt stack 0
  1205                           tblptru	equ	0xFF8
  1206                           tblptrh	equ	0xFF7
  1207                           tblptrl	equ	0xFF6
  1208                           tablat	equ	0xFF5
  1209                           intcon2	equ	0xFF1
  1210                           postinc0	equ	0xFEE
  1211                           postdec1	equ	0xFE5
  1212                           fsr1l	equ	0xFE1
  1213                           status	equ	0xFD8
  1214                           
  1215 ;; *************** function _displaySix *****************
  1216 ;; Defined at:
  1217 ;;		line 86 in file "morse.c"
  1218 ;; Parameters:    Size  Location     Type
  1219 ;;		None
  1220 ;; Auto vars:     Size  Location     Type
  1221 ;;		None
  1222 ;; Return value:  Size  Location     Type
  1223 ;;                  1    wreg      void 
  1224 ;; Registers used:
  1225 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1226 ;; Tracked objects:
  1227 ;;		On entry : 0/0
  1228 ;;		On exit  : 0/0
  1229 ;;		Unchanged: 0/0
  1230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1234 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1235 ;;Total ram usage:        0 bytes
  1236 ;; Hardware stack levels used:    1
  1237 ;; Hardware stack levels required when called:    4
  1238 ;; This function calls:
  1239 ;;		_decode
  1240 ;;		_displayCharOnLCD
  1241 ;; This function is called by:
  1242 ;;		_pressedKeyAction
  1243 ;; This function uses a non-reentrant model
  1244 ;;
  1245                           
  1246                           	psect	text8
  1247  00B928                     __ptext8:
  1248                           	opt stack 0
  1249  00B928                     _displaySix:
  1250                           	opt stack 23
  1251                           
  1252                           ;morse.c: 87: displayCharOnLCD(keyCode);
  1253                           
  1254                           ;incstack = 0
  1255  00B928  5056               	movf	_keyCode,w,c
  1256  00B92A  EC4E  F05C         	call	_displayCharOnLCD
  1257                           
  1258                           ;morse.c: 88: decode(seisMorse);
  1259  00B92E  0E36               	movlw	low _seisMorse
  1260  00B930  6E4E               	movwf	decode@caracter,c
  1261  00B932  0E00               	movlw	high _seisMorse
  1262  00B934  6E4F               	movwf	decode@caracter+1,c
  1263  00B936  EC63  F05E         	call	_decode	;wreg free
  1264  00B93A  0012               	return		;funcret
  1265  00B93C                     __end_of_displaySix:
  1266                           	opt stack 0
  1267                           tblptru	equ	0xFF8
  1268                           tblptrh	equ	0xFF7
  1269                           tblptrl	equ	0xFF6
  1270                           tablat	equ	0xFF5
  1271                           intcon2	equ	0xFF1
  1272                           postinc0	equ	0xFEE
  1273                           postdec1	equ	0xFE5
  1274                           fsr1l	equ	0xFE1
  1275                           status	equ	0xFD8
  1276                           
  1277 ;; *************** function _displaySeven *****************
  1278 ;; Defined at:
  1279 ;;		line 91 in file "morse.c"
  1280 ;; Parameters:    Size  Location     Type
  1281 ;;		None
  1282 ;; Auto vars:     Size  Location     Type
  1283 ;;		None
  1284 ;; Return value:  Size  Location     Type
  1285 ;;                  1    wreg      void 
  1286 ;; Registers used:
  1287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1288 ;; Tracked objects:
  1289 ;;		On entry : 0/0
  1290 ;;		On exit  : 0/0
  1291 ;;		Unchanged: 0/0
  1292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1296 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1297 ;;Total ram usage:        0 bytes
  1298 ;; Hardware stack levels used:    1
  1299 ;; Hardware stack levels required when called:    4
  1300 ;; This function calls:
  1301 ;;		_decode
  1302 ;;		_displayCharOnLCD
  1303 ;; This function is called by:
  1304 ;;		_pressedKeyAction
  1305 ;; This function uses a non-reentrant model
  1306 ;;
  1307                           
  1308                           	psect	text9
  1309  00B914                     __ptext9:
  1310                           	opt stack 0
  1311  00B914                     _displaySeven:
  1312                           	opt stack 23
  1313                           
  1314                           ;morse.c: 92: displayCharOnLCD(keyCode);
  1315                           
  1316                           ;incstack = 0
  1317  00B914  5056               	movf	_keyCode,w,c
  1318  00B916  EC4E  F05C         	call	_displayCharOnLCD
  1319                           
  1320                           ;morse.c: 93: decode(sieteMorse);
  1321  00B91A  0E3D               	movlw	low _sieteMorse
  1322  00B91C  6E4E               	movwf	decode@caracter,c
  1323  00B91E  0E00               	movlw	high _sieteMorse
  1324  00B920  6E4F               	movwf	decode@caracter+1,c
  1325  00B922  EC63  F05E         	call	_decode	;wreg free
  1326  00B926  0012               	return		;funcret
  1327  00B928                     __end_of_displaySeven:
  1328                           	opt stack 0
  1329                           tblptru	equ	0xFF8
  1330                           tblptrh	equ	0xFF7
  1331                           tblptrl	equ	0xFF6
  1332                           tablat	equ	0xFF5
  1333                           intcon2	equ	0xFF1
  1334                           postinc0	equ	0xFEE
  1335                           postdec1	equ	0xFE5
  1336                           fsr1l	equ	0xFE1
  1337                           status	equ	0xFD8
  1338                           
  1339 ;; *************** function _displaySOS *****************
  1340 ;; Defined at:
  1341 ;;		line 111 in file "morse.c"
  1342 ;; Parameters:    Size  Location     Type
  1343 ;;		None
  1344 ;; Auto vars:     Size  Location     Type
  1345 ;;		None
  1346 ;; Return value:  Size  Location     Type
  1347 ;;                  1    wreg      void 
  1348 ;; Registers used:
  1349 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1350 ;; Tracked objects:
  1351 ;;		On entry : 0/0
  1352 ;;		On exit  : 0/0
  1353 ;;		Unchanged: 0/0
  1354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1359 ;;Total ram usage:        0 bytes
  1360 ;; Hardware stack levels used:    1
  1361 ;; Hardware stack levels required when called:    4
  1362 ;; This function calls:
  1363 ;;		_checkDDRAM
  1364 ;;		_decode
  1365 ;;		_displayLineOnLCD
  1366 ;; This function is called by:
  1367 ;;		_pressedKeyAction
  1368 ;; This function uses a non-reentrant model
  1369 ;;
  1370                           
  1371                           	psect	text10
  1372  00BAAE                     __ptext10:
  1373                           	opt stack 0
  1374  00BAAE                     _displaySOS:
  1375                           	opt stack 23
  1376                           
  1377                           ;morse.c: 112: displayLineOnLCD(SOS, 3);
  1378                           
  1379                           ;incstack = 0
  1380  00BAAE  0E44               	movlw	low _SOS
  1381  00BAB0  6E4A               	movwf	displayLineOnLCD@array,c
  1382  00BAB2  0E00               	movlw	high _SOS
  1383  00BAB4  6E4B               	movwf	displayLineOnLCD@array+1,c
  1384  00BAB6  0E03               	movlw	3
  1385  00BAB8  6E4C               	movwf	displayLineOnLCD@sizeOfArray,c
  1386  00BABA  EC16  F05D         	call	_displayLineOnLCD	;wreg free
  1387                           
  1388                           ;morse.c: 113: DDRAMAddress++;
  1389  00BABE  2A54               	incf	_DDRAMAddress,f,c
  1390                           
  1391                           ;morse.c: 114: checkDDRAM();
  1392  00BAC0  ECF3  F05C         	call	_checkDDRAM	;wreg free
  1393                           
  1394                           ;morse.c: 115: DDRAMAddress++;
  1395  00BAC4  2A54               	incf	_DDRAMAddress,f,c
  1396                           
  1397                           ;morse.c: 116: checkDDRAM();
  1398  00BAC6  ECF3  F05C         	call	_checkDDRAM	;wreg free
  1399                           
  1400                           ;morse.c: 117: DDRAMAddress++;
  1401  00BACA  2A54               	incf	_DDRAMAddress,f,c
  1402                           
  1403                           ;morse.c: 118: checkDDRAM();
  1404  00BACC  ECF3  F05C         	call	_checkDDRAM	;wreg free
  1405                           
  1406                           ;morse.c: 119: decode(SOSMorse);
  1407  00BAD0  0E78               	movlw	low _SOSMorse
  1408  00BAD2  6E4E               	movwf	decode@caracter,c
  1409  00BAD4  0E00               	movlw	high _SOSMorse
  1410  00BAD6  6E4F               	movwf	decode@caracter+1,c
  1411  00BAD8  EC63  F05E         	call	_decode	;wreg free
  1412  00BADC  0012               	return		;funcret
  1413  00BADE                     __end_of_displaySOS:
  1414                           	opt stack 0
  1415                           tblptru	equ	0xFF8
  1416                           tblptrh	equ	0xFF7
  1417                           tblptrl	equ	0xFF6
  1418                           tablat	equ	0xFF5
  1419                           intcon2	equ	0xFF1
  1420                           postinc0	equ	0xFEE
  1421                           postdec1	equ	0xFE5
  1422                           fsr1l	equ	0xFE1
  1423                           status	equ	0xFD8
  1424                           
  1425 ;; *************** function _displayLineOnLCD *****************
  1426 ;; Defined at:
  1427 ;;		line 182 in file "main.c"
  1428 ;; Parameters:    Size  Location     Type
  1429 ;;  array           2    2[COMRAM] PTR unsigned char 
  1430 ;;		 -> SOS(4), 
  1431 ;;  sizeOfArray     1    4[COMRAM] unsigned char 
  1432 ;; Auto vars:     Size  Location     Type
  1433 ;;  i               1    5[COMRAM] unsigned char 
  1434 ;; Return value:  Size  Location     Type
  1435 ;;                  1    wreg      void 
  1436 ;; Registers used:
  1437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1438 ;; Tracked objects:
  1439 ;;		On entry : 0/0
  1440 ;;		On exit  : 0/0
  1441 ;;		Unchanged: 0/0
  1442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1443 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1444 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1446 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1447 ;;Total ram usage:        4 bytes
  1448 ;; Hardware stack levels used:    1
  1449 ;; Hardware stack levels required when called:    2
  1450 ;; This function calls:
  1451 ;;		_displayCharOnLCD
  1452 ;; This function is called by:
  1453 ;;		_displaySOS
  1454 ;; This function uses a non-reentrant model
  1455 ;;
  1456                           
  1457                           	psect	text11
  1458  00BA2C                     __ptext11:
  1459                           	opt stack 0
  1460  00BA2C                     _displayLineOnLCD:
  1461                           	opt stack 24
  1462                           
  1463                           ;main.c: 183: unsigned char i;
  1464                           ;main.c: 184: for(i=0; i<sizeOfArray; i++){
  1465                           
  1466                           ;incstack = 0
  1467  00BA2C  0E00               	movlw	0
  1468  00BA2E  6E4D               	movwf	displayLineOnLCD@i,c
  1469  00BA30  D00C               	goto	l1676
  1470  00BA32                     l1672:
  1471                           
  1472                           ;main.c: 185: displayCharOnLCD(array[i]);
  1473  00BA32  504D               	movf	displayLineOnLCD@i,w,c
  1474  00BA34  0D01               	mullw	1
  1475  00BA36  50F3               	movf	prodl,w,c
  1476  00BA38  244A               	addwf	displayLineOnLCD@array,w,c
  1477  00BA3A  6ED9               	movwf	fsr2l,c
  1478  00BA3C  50F4               	movf	prodh,w,c
  1479  00BA3E  204B               	addwfc	displayLineOnLCD@array+1,w,c
  1480  00BA40  6EDA               	movwf	fsr2h,c
  1481  00BA42  50DF               	movf	indf2,w,c
  1482  00BA44  EC4E  F05C         	call	_displayCharOnLCD
  1483  00BA48  2A4D               	incf	displayLineOnLCD@i,f,c
  1484  00BA4A                     l1676:
  1485  00BA4A  504C               	movf	displayLineOnLCD@sizeOfArray,w,c
  1486  00BA4C  5C4D               	subwf	displayLineOnLCD@i,w,c
  1487  00BA4E  B0D8               	btfsc	status,0,c
  1488  00BA50  0012               	return	
  1489  00BA52  D7EF               	goto	l1672
  1490  00BA54                     __end_of_displayLineOnLCD:
  1491                           	opt stack 0
  1492                           tblptru	equ	0xFF8
  1493                           tblptrh	equ	0xFF7
  1494                           tblptrl	equ	0xFF6
  1495                           tablat	equ	0xFF5
  1496                           prodh	equ	0xFF4
  1497                           prodl	equ	0xFF3
  1498                           intcon2	equ	0xFF1
  1499                           postinc0	equ	0xFEE
  1500                           postdec1	equ	0xFE5
  1501                           fsr1l	equ	0xFE1
  1502                           indf2	equ	0xFDF
  1503                           fsr2h	equ	0xFDA
  1504                           fsr2l	equ	0xFD9
  1505                           status	equ	0xFD8
  1506                           
  1507 ;; *************** function _displayOne *****************
  1508 ;; Defined at:
  1509 ;;		line 61 in file "morse.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;		None
  1512 ;; Auto vars:     Size  Location     Type
  1513 ;;		None
  1514 ;; Return value:  Size  Location     Type
  1515 ;;                  1    wreg      void 
  1516 ;; Registers used:
  1517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1518 ;; Tracked objects:
  1519 ;;		On entry : 0/0
  1520 ;;		On exit  : 0/0
  1521 ;;		Unchanged: 0/0
  1522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1527 ;;Total ram usage:        0 bytes
  1528 ;; Hardware stack levels used:    1
  1529 ;; Hardware stack levels required when called:    4
  1530 ;; This function calls:
  1531 ;;		_decode
  1532 ;;		_displayCharOnLCD
  1533 ;; This function is called by:
  1534 ;;		_pressedKeyAction
  1535 ;; This function uses a non-reentrant model
  1536 ;;
  1537                           
  1538                           	psect	text12
  1539  00B900                     __ptext12:
  1540                           	opt stack 0
  1541  00B900                     _displayOne:
  1542                           	opt stack 23
  1543                           
  1544                           ;morse.c: 62: displayCharOnLCD(keyCode);
  1545                           
  1546                           ;incstack = 0
  1547  00B900  5056               	movf	_keyCode,w,c
  1548  00B902  EC4E  F05C         	call	_displayCharOnLCD
  1549                           
  1550                           ;morse.c: 63: decode(unoMorse);
  1551  00B906  0E03               	movlw	low _unoMorse
  1552  00B908  6E4E               	movwf	decode@caracter,c
  1553  00B90A  0E00               	movlw	high _unoMorse
  1554  00B90C  6E4F               	movwf	decode@caracter+1,c
  1555  00B90E  EC63  F05E         	call	_decode	;wreg free
  1556  00B912  0012               	return		;funcret
  1557  00B914                     __end_of_displayOne:
  1558                           	opt stack 0
  1559                           tblptru	equ	0xFF8
  1560                           tblptrh	equ	0xFF7
  1561                           tblptrl	equ	0xFF6
  1562                           tablat	equ	0xFF5
  1563                           prodh	equ	0xFF4
  1564                           prodl	equ	0xFF3
  1565                           intcon2	equ	0xFF1
  1566                           postinc0	equ	0xFEE
  1567                           postdec1	equ	0xFE5
  1568                           fsr1l	equ	0xFE1
  1569                           indf2	equ	0xFDF
  1570                           fsr2h	equ	0xFDA
  1571                           fsr2l	equ	0xFD9
  1572                           status	equ	0xFD8
  1573                           
  1574 ;; *************** function _displayNine *****************
  1575 ;; Defined at:
  1576 ;;		line 101 in file "morse.c"
  1577 ;; Parameters:    Size  Location     Type
  1578 ;;		None
  1579 ;; Auto vars:     Size  Location     Type
  1580 ;;		None
  1581 ;; Return value:  Size  Location     Type
  1582 ;;                  1    wreg      void 
  1583 ;; Registers used:
  1584 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1585 ;; Tracked objects:
  1586 ;;		On entry : 0/0
  1587 ;;		On exit  : 0/0
  1588 ;;		Unchanged: 0/0
  1589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1593 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1594 ;;Total ram usage:        0 bytes
  1595 ;; Hardware stack levels used:    1
  1596 ;; Hardware stack levels required when called:    4
  1597 ;; This function calls:
  1598 ;;		_decode
  1599 ;;		_displayCharOnLCD
  1600 ;; This function is called by:
  1601 ;;		_pressedKeyAction
  1602 ;; This function uses a non-reentrant model
  1603 ;;
  1604                           
  1605                           	psect	text13
  1606  00B8EC                     __ptext13:
  1607                           	opt stack 0
  1608  00B8EC                     _displayNine:
  1609                           	opt stack 23
  1610                           
  1611                           ;morse.c: 102: displayCharOnLCD(keyCode);
  1612                           
  1613                           ;incstack = 0
  1614  00B8EC  5056               	movf	_keyCode,w,c
  1615  00B8EE  EC4E  F05C         	call	_displayCharOnLCD
  1616                           
  1617                           ;morse.c: 103: decode(nueveMorse);
  1618  00B8F2  0E28               	movlw	low _nueveMorse
  1619  00B8F4  6E4E               	movwf	decode@caracter,c
  1620  00B8F6  0E00               	movlw	high _nueveMorse
  1621  00B8F8  6E4F               	movwf	decode@caracter+1,c
  1622  00B8FA  EC63  F05E         	call	_decode	;wreg free
  1623  00B8FE  0012               	return		;funcret
  1624  00B900                     __end_of_displayNine:
  1625                           	opt stack 0
  1626                           tblptru	equ	0xFF8
  1627                           tblptrh	equ	0xFF7
  1628                           tblptrl	equ	0xFF6
  1629                           tablat	equ	0xFF5
  1630                           prodh	equ	0xFF4
  1631                           prodl	equ	0xFF3
  1632                           intcon2	equ	0xFF1
  1633                           postinc0	equ	0xFEE
  1634                           postdec1	equ	0xFE5
  1635                           fsr1l	equ	0xFE1
  1636                           indf2	equ	0xFDF
  1637                           fsr2h	equ	0xFDA
  1638                           fsr2l	equ	0xFD9
  1639                           status	equ	0xFD8
  1640                           
  1641 ;; *************** function _displayFour *****************
  1642 ;; Defined at:
  1643 ;;		line 76 in file "morse.c"
  1644 ;; Parameters:    Size  Location     Type
  1645 ;;		None
  1646 ;; Auto vars:     Size  Location     Type
  1647 ;;		None
  1648 ;; Return value:  Size  Location     Type
  1649 ;;                  1    wreg      void 
  1650 ;; Registers used:
  1651 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1652 ;; Tracked objects:
  1653 ;;		On entry : 0/0
  1654 ;;		On exit  : 0/0
  1655 ;;		Unchanged: 0/0
  1656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1660 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1661 ;;Total ram usage:        0 bytes
  1662 ;; Hardware stack levels used:    1
  1663 ;; Hardware stack levels required when called:    4
  1664 ;; This function calls:
  1665 ;;		_decode
  1666 ;;		_displayCharOnLCD
  1667 ;; This function is called by:
  1668 ;;		_pressedKeyAction
  1669 ;; This function uses a non-reentrant model
  1670 ;;
  1671                           
  1672                           	psect	text14
  1673  00B8D8                     __ptext14:
  1674                           	opt stack 0
  1675  00B8D8                     _displayFour:
  1676                           	opt stack 23
  1677                           
  1678                           ;morse.c: 77: displayCharOnLCD(keyCode);
  1679                           
  1680                           ;incstack = 0
  1681  00B8D8  5056               	movf	_keyCode,w,c
  1682  00B8DA  EC4E  F05C         	call	_displayCharOnLCD
  1683                           
  1684                           ;morse.c: 78: decode(cuatroMorse);
  1685  00B8DE  0E1A               	movlw	low _cuatroMorse
  1686  00B8E0  6E4E               	movwf	decode@caracter,c
  1687  00B8E2  0E00               	movlw	high _cuatroMorse
  1688  00B8E4  6E4F               	movwf	decode@caracter+1,c
  1689  00B8E6  EC63  F05E         	call	_decode	;wreg free
  1690  00B8EA  0012               	return		;funcret
  1691  00B8EC                     __end_of_displayFour:
  1692                           	opt stack 0
  1693                           tblptru	equ	0xFF8
  1694                           tblptrh	equ	0xFF7
  1695                           tblptrl	equ	0xFF6
  1696                           tablat	equ	0xFF5
  1697                           prodh	equ	0xFF4
  1698                           prodl	equ	0xFF3
  1699                           intcon2	equ	0xFF1
  1700                           postinc0	equ	0xFEE
  1701                           postdec1	equ	0xFE5
  1702                           fsr1l	equ	0xFE1
  1703                           indf2	equ	0xFDF
  1704                           fsr2h	equ	0xFDA
  1705                           fsr2l	equ	0xFD9
  1706                           status	equ	0xFD8
  1707                           
  1708 ;; *************** function _displayFive *****************
  1709 ;; Defined at:
  1710 ;;		line 81 in file "morse.c"
  1711 ;; Parameters:    Size  Location     Type
  1712 ;;		None
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;		None
  1715 ;; Return value:  Size  Location     Type
  1716 ;;                  1    wreg      void 
  1717 ;; Registers used:
  1718 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1719 ;; Tracked objects:
  1720 ;;		On entry : 0/0
  1721 ;;		On exit  : 0/0
  1722 ;;		Unchanged: 0/0
  1723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1728 ;;Total ram usage:        0 bytes
  1729 ;; Hardware stack levels used:    1
  1730 ;; Hardware stack levels required when called:    4
  1731 ;; This function calls:
  1732 ;;		_decode
  1733 ;;		_displayCharOnLCD
  1734 ;; This function is called by:
  1735 ;;		_pressedKeyAction
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           	psect	text15
  1740  00B8C4                     __ptext15:
  1741                           	opt stack 0
  1742  00B8C4                     _displayFive:
  1743                           	opt stack 23
  1744                           
  1745                           ;morse.c: 82: displayCharOnLCD(keyCode);
  1746                           
  1747                           ;incstack = 0
  1748  00B8C4  5056               	movf	_keyCode,w,c
  1749  00B8C6  EC4E  F05C         	call	_displayCharOnLCD
  1750                           
  1751                           ;morse.c: 83: decode(cincoMorse);
  1752  00B8CA  0E13               	movlw	low _cincoMorse
  1753  00B8CC  6E4E               	movwf	decode@caracter,c
  1754  00B8CE  0E00               	movlw	high _cincoMorse
  1755  00B8D0  6E4F               	movwf	decode@caracter+1,c
  1756  00B8D2  EC63  F05E         	call	_decode	;wreg free
  1757  00B8D6  0012               	return		;funcret
  1758  00B8D8                     __end_of_displayFive:
  1759                           	opt stack 0
  1760                           tblptru	equ	0xFF8
  1761                           tblptrh	equ	0xFF7
  1762                           tblptrl	equ	0xFF6
  1763                           tablat	equ	0xFF5
  1764                           prodh	equ	0xFF4
  1765                           prodl	equ	0xFF3
  1766                           intcon2	equ	0xFF1
  1767                           postinc0	equ	0xFEE
  1768                           postdec1	equ	0xFE5
  1769                           fsr1l	equ	0xFE1
  1770                           indf2	equ	0xFDF
  1771                           fsr2h	equ	0xFDA
  1772                           fsr2l	equ	0xFD9
  1773                           status	equ	0xFD8
  1774                           
  1775 ;; *************** function _displayEight *****************
  1776 ;; Defined at:
  1777 ;;		line 96 in file "morse.c"
  1778 ;; Parameters:    Size  Location     Type
  1779 ;;		None
  1780 ;; Auto vars:     Size  Location     Type
  1781 ;;		None
  1782 ;; Return value:  Size  Location     Type
  1783 ;;                  1    wreg      void 
  1784 ;; Registers used:
  1785 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1786 ;; Tracked objects:
  1787 ;;		On entry : 0/0
  1788 ;;		On exit  : 0/0
  1789 ;;		Unchanged: 0/0
  1790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1795 ;;Total ram usage:        0 bytes
  1796 ;; Hardware stack levels used:    1
  1797 ;; Hardware stack levels required when called:    4
  1798 ;; This function calls:
  1799 ;;		_decode
  1800 ;;		_displayCharOnLCD
  1801 ;; This function is called by:
  1802 ;;		_pressedKeyAction
  1803 ;; This function uses a non-reentrant model
  1804 ;;
  1805                           
  1806                           	psect	text16
  1807  00B8B0                     __ptext16:
  1808                           	opt stack 0
  1809  00B8B0                     _displayEight:
  1810                           	opt stack 23
  1811                           
  1812                           ;morse.c: 97: displayCharOnLCD(keyCode);
  1813                           
  1814                           ;incstack = 0
  1815  00B8B0  5056               	movf	_keyCode,w,c
  1816  00B8B2  EC4E  F05C         	call	_displayCharOnLCD
  1817                           
  1818                           ;morse.c: 98: decode(ochoMorse);
  1819  00B8B6  0E2F               	movlw	low _ochoMorse
  1820  00B8B8  6E4E               	movwf	decode@caracter,c
  1821  00B8BA  0E00               	movlw	high _ochoMorse
  1822  00B8BC  6E4F               	movwf	decode@caracter+1,c
  1823  00B8BE  EC63  F05E         	call	_decode	;wreg free
  1824  00B8C2  0012               	return		;funcret
  1825  00B8C4                     __end_of_displayEight:
  1826                           	opt stack 0
  1827                           tblptru	equ	0xFF8
  1828                           tblptrh	equ	0xFF7
  1829                           tblptrl	equ	0xFF6
  1830                           tablat	equ	0xFF5
  1831                           prodh	equ	0xFF4
  1832                           prodl	equ	0xFF3
  1833                           intcon2	equ	0xFF1
  1834                           postinc0	equ	0xFEE
  1835                           postdec1	equ	0xFE5
  1836                           fsr1l	equ	0xFE1
  1837                           indf2	equ	0xFDF
  1838                           fsr2h	equ	0xFDA
  1839                           fsr2l	equ	0xFD9
  1840                           status	equ	0xFD8
  1841                           
  1842 ;; *************** function _decode *****************
  1843 ;; Defined at:
  1844 ;;		line 32 in file "morse.c"
  1845 ;; Parameters:    Size  Location     Type
  1846 ;;  caracter        2    6[COMRAM] PTR unsigned char 
  1847 ;;		 -> SOSMorse(10), ceroMorse(7), nueveMorse(7), ochoMorse(7), 
  1848 ;;		 -> sieteMorse(7), seisMorse(7), cincoMorse(7), cuatroMorse(7), 
  1849 ;;		 -> tresMorse(9), dosMorse(7), unoMorse(9), 
  1850 ;; Auto vars:     Size  Location     Type
  1851 ;;  i               1   10[COMRAM] unsigned char 
  1852 ;; Return value:  Size  Location     Type
  1853 ;;                  1    wreg      void 
  1854 ;; Registers used:
  1855 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1856 ;; Tracked objects:
  1857 ;;		On entry : 0/0
  1858 ;;		On exit  : 0/0
  1859 ;;		Unchanged: 0/0
  1860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1861 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1862 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1863 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1864 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1865 ;;Total ram usage:        5 bytes
  1866 ;; Hardware stack levels used:    1
  1867 ;; Hardware stack levels required when called:    3
  1868 ;; This function calls:
  1869 ;;		_buzzerLong
  1870 ;;		_buzzerShort
  1871 ;;		_checkDDRAM
  1872 ;;		_displayCharOnLCD
  1873 ;;		_shortDelay
  1874 ;;		_strlen
  1875 ;; This function is called by:
  1876 ;;		_displayOne
  1877 ;;		_displayTwo
  1878 ;;		_displayThree
  1879 ;;		_displayFour
  1880 ;;		_displayFive
  1881 ;;		_displaySix
  1882 ;;		_displaySeven
  1883 ;;		_displayEight
  1884 ;;		_displayNine
  1885 ;;		_displayZero
  1886 ;;		_displaySOS
  1887 ;; This function uses a non-reentrant model
  1888 ;;
  1889                           
  1890                           	psect	text17
  1891  00BCC6                     __ptext17:
  1892                           	opt stack 0
  1893  00BCC6                     _decode:
  1894                           	opt stack 23
  1895                           
  1896                           ;morse.c: 34: shortDelay();
  1897                           
  1898                           ;incstack = 0
  1899  00BCC6  EC2F  F05C         	call	_shortDelay	;wreg free
  1900                           
  1901                           ;morse.c: 35: displayCharOnLCD(' ');
  1902  00BCCA  0E20               	movlw	32
  1903  00BCCC  EC4E  F05C         	call	_displayCharOnLCD
  1904                           
  1905                           ;morse.c: 36: DDRAMAddress++;
  1906  00BCD0  2A54               	incf	_DDRAMAddress,f,c
  1907                           
  1908                           ;morse.c: 37: checkDDRAM();
  1909  00BCD2  ECF3  F05C         	call	_checkDDRAM	;wreg free
  1910                           
  1911                           ;morse.c: 38: DDRAMAddress++;
  1912  00BCD6  2A54               	incf	_DDRAMAddress,f,c
  1913                           
  1914                           ;morse.c: 39: checkDDRAM();
  1915  00BCD8  ECF3  F05C         	call	_checkDDRAM	;wreg free
  1916                           
  1917                           ;morse.c: 41: for (unsigned char i = 0; i < strlen(caracter); i++)
  1918  00BCDC  0E00               	movlw	0
  1919  00BCDE  6E52               	movwf	decode@i,c
  1920  00BCE0  D029               	goto	l1704
  1921  00BCE2                     l1688:
  1922                           
  1923                           ;morse.c: 42: {
  1924                           ;morse.c: 43: if (caracter[i] == '.')
  1925  00BCE2  5052               	movf	decode@i,w,c
  1926  00BCE4  0D01               	mullw	1
  1927  00BCE6  50F3               	movf	prodl,w,c
  1928  00BCE8  244E               	addwf	decode@caracter,w,c
  1929  00BCEA  6ED9               	movwf	fsr2l,c
  1930  00BCEC  50F4               	movf	prodh,w,c
  1931  00BCEE  204F               	addwfc	decode@caracter+1,w,c
  1932  00BCF0  6EDA               	movwf	fsr2h,c
  1933  00BCF2  0E2E               	movlw	46
  1934  00BCF4  18DE               	xorwf	postinc2,w,c
  1935  00BCF6  A4D8               	btfss	status,2,c
  1936  00BCF8  D008               	goto	l1696
  1937                           
  1938                           ;morse.c: 44: {
  1939                           ;morse.c: 45: buzzerShort();
  1940  00BCFA  EC3D  F05C         	call	_buzzerShort	;wreg free
  1941                           
  1942                           ;morse.c: 46: displayCharOnLCD('.');
  1943  00BCFE  0E2E               	movlw	46
  1944  00BD00  EC4E  F05C         	call	_displayCharOnLCD
  1945                           
  1946                           ;morse.c: 47: DDRAMAddress++;
  1947  00BD04  2A54               	incf	_DDRAMAddress,f,c
  1948                           
  1949                           ;morse.c: 48: checkDDRAM();
  1950  00BD06  ECF3  F05C         	call	_checkDDRAM	;wreg free
  1951  00BD0A                     l1696:
  1952                           
  1953                           ;morse.c: 49: }
  1954                           ;morse.c: 51: if (caracter[i] == '-')
  1955  00BD0A  5052               	movf	decode@i,w,c
  1956  00BD0C  0D01               	mullw	1
  1957  00BD0E  50F3               	movf	prodl,w,c
  1958  00BD10  244E               	addwf	decode@caracter,w,c
  1959  00BD12  6ED9               	movwf	fsr2l,c
  1960  00BD14  50F4               	movf	prodh,w,c
  1961  00BD16  204F               	addwfc	decode@caracter+1,w,c
  1962  00BD18  6EDA               	movwf	fsr2h,c
  1963  00BD1A  0E2D               	movlw	45
  1964  00BD1C  18DE               	xorwf	postinc2,w,c
  1965  00BD1E  A4D8               	btfss	status,2,c
  1966  00BD20  D008               	goto	l362
  1967                           
  1968                           ;morse.c: 52: {
  1969                           ;morse.c: 53: buzzerLong();
  1970  00BD22  EC36  F05C         	call	_buzzerLong	;wreg free
  1971                           
  1972                           ;morse.c: 54: displayCharOnLCD('-');
  1973  00BD26  0E2D               	movlw	45
  1974  00BD28  EC4E  F05C         	call	_displayCharOnLCD
  1975                           
  1976                           ;morse.c: 55: DDRAMAddress++;
  1977  00BD2C  2A54               	incf	_DDRAMAddress,f,c
  1978                           
  1979                           ;morse.c: 56: checkDDRAM();
  1980  00BD2E  ECF3  F05C         	call	_checkDDRAM	;wreg free
  1981  00BD32                     l362:
  1982  00BD32  2A52               	incf	decode@i,f,c
  1983  00BD34                     l1704:
  1984  00BD34  C04E  F048         	movff	decode@caracter,strlen@s
  1985  00BD38  C04F  F049         	movff	decode@caracter+1,strlen@s+1
  1986  00BD3C  EC6F  F05D         	call	_strlen	;wreg free
  1987  00BD40  5052               	movf	decode@i,w,c
  1988  00BD42  6E50               	movwf	??_decode& (0+255),c
  1989  00BD44  6A51               	clrf	(??_decode+1)& (0+255),c
  1990  00BD46  5048               	movf	?_strlen,w,c
  1991  00BD48  5C50               	subwf	??_decode,w,c
  1992  00BD4A  5049               	movf	?_strlen+1,w,c
  1993  00BD4C  5851               	subwfb	??_decode+1,w,c
  1994  00BD4E  B0D8               	btfsc	status,0,c
  1995  00BD50  0012               	return	
  1996  00BD52  D7C7               	goto	l1688
  1997  00BD54                     __end_of_decode:
  1998                           	opt stack 0
  1999                           tblptru	equ	0xFF8
  2000                           tblptrh	equ	0xFF7
  2001                           tblptrl	equ	0xFF6
  2002                           tablat	equ	0xFF5
  2003                           prodh	equ	0xFF4
  2004                           prodl	equ	0xFF3
  2005                           intcon2	equ	0xFF1
  2006                           postinc0	equ	0xFEE
  2007                           postdec1	equ	0xFE5
  2008                           fsr1l	equ	0xFE1
  2009                           indf2	equ	0xFDF
  2010                           postinc2	equ	0xFDE
  2011                           fsr2h	equ	0xFDA
  2012                           fsr2l	equ	0xFD9
  2013                           status	equ	0xFD8
  2014                           
  2015 ;; *************** function _strlen *****************
  2016 ;; Defined at:
  2017 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\strlen.c"
  2018 ;; Parameters:    Size  Location     Type
  2019 ;;  s               2    0[COMRAM] PTR const unsigned char 
  2020 ;;		 -> SOSMorse(10), ceroMorse(7), nueveMorse(7), ochoMorse(7), 
  2021 ;;		 -> sieteMorse(7), seisMorse(7), cincoMorse(7), cuatroMorse(7), 
  2022 ;;		 -> tresMorse(9), dosMorse(7), unoMorse(9), 
  2023 ;; Auto vars:     Size  Location     Type
  2024 ;;  cp              2    4[COMRAM] PTR const unsigned char 
  2025 ;;		 -> SOSMorse(10), ceroMorse(7), nueveMorse(7), ochoMorse(7), 
  2026 ;;		 -> sieteMorse(7), seisMorse(7), cincoMorse(7), cuatroMorse(7), 
  2027 ;;		 -> tresMorse(9), dosMorse(7), unoMorse(9), 
  2028 ;; Return value:  Size  Location     Type
  2029 ;;                  2    0[COMRAM] unsigned int 
  2030 ;; Registers used:
  2031 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2032 ;; Tracked objects:
  2033 ;;		On entry : 0/0
  2034 ;;		On exit  : 0/0
  2035 ;;		Unchanged: 0/0
  2036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2037 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2038 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2039 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2040 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2041 ;;Total ram usage:        6 bytes
  2042 ;; Hardware stack levels used:    1
  2043 ;; This function calls:
  2044 ;;		Nothing
  2045 ;; This function is called by:
  2046 ;;		_decode
  2047 ;; This function uses a non-reentrant model
  2048 ;;
  2049                           
  2050                           	psect	text18
  2051  00BADE                     __ptext18:
  2052                           	opt stack 0
  2053  00BADE                     _strlen:
  2054                           	opt stack 25
  2055                           
  2056                           ;incstack = 0
  2057  00BADE  C048  F04C         	movff	strlen@s,strlen@cp
  2058  00BAE2  C049  F04D         	movff	strlen@s+1,strlen@cp+1
  2059  00BAE6  D002               	goto	l1664
  2060  00BAE8                     l1662:
  2061  00BAE8  4A4C               	infsnz	strlen@cp,f,c
  2062  00BAEA  2A4D               	incf	strlen@cp+1,f,c
  2063  00BAEC                     l1664:
  2064  00BAEC  C04C  FFD9         	movff	strlen@cp,fsr2l
  2065  00BAF0  C04D  FFDA         	movff	strlen@cp+1,fsr2h
  2066  00BAF4  50DF               	movf	indf2,w,c
  2067  00BAF6  A4D8               	btfss	status,2,c
  2068  00BAF8  D7F7               	goto	l1662
  2069  00BAFA  C048  F04A         	movff	strlen@s,??_strlen
  2070  00BAFE  C049  F04B         	movff	strlen@s+1,??_strlen+1
  2071  00BB02  1E4A               	comf	??_strlen,f,c
  2072  00BB04  1E4B               	comf	??_strlen+1,f,c
  2073  00BB06  4A4A               	infsnz	??_strlen,f,c
  2074  00BB08  2A4B               	incf	??_strlen+1,f,c
  2075  00BB0A  504C               	movf	strlen@cp,w,c
  2076  00BB0C  244A               	addwf	??_strlen,w,c
  2077  00BB0E  6E48               	movwf	?_strlen,c
  2078  00BB10  504D               	movf	strlen@cp+1,w,c
  2079  00BB12  204B               	addwfc	??_strlen+1,w,c
  2080  00BB14  6E49               	movwf	?_strlen+1,c
  2081  00BB16  0012               	return	
  2082  00BB18                     __end_of_strlen:
  2083                           	opt stack 0
  2084                           tblptru	equ	0xFF8
  2085                           tblptrh	equ	0xFF7
  2086                           tblptrl	equ	0xFF6
  2087                           tablat	equ	0xFF5
  2088                           prodh	equ	0xFF4
  2089                           prodl	equ	0xFF3
  2090                           intcon2	equ	0xFF1
  2091                           postinc0	equ	0xFEE
  2092                           postdec1	equ	0xFE5
  2093                           fsr1l	equ	0xFE1
  2094                           indf2	equ	0xFDF
  2095                           postinc2	equ	0xFDE
  2096                           fsr2h	equ	0xFDA
  2097                           fsr2l	equ	0xFD9
  2098                           status	equ	0xFD8
  2099                           
  2100 ;; *************** function _displayCharOnLCD *****************
  2101 ;; Defined at:
  2102 ;;		line 173 in file "main.c"
  2103 ;; Parameters:    Size  Location     Type
  2104 ;;  character       1    wreg     unsigned char 
  2105 ;; Auto vars:     Size  Location     Type
  2106 ;;  character       1    1[COMRAM] unsigned char 
  2107 ;; Return value:  Size  Location     Type
  2108 ;;                  1    wreg      void 
  2109 ;; Registers used:
  2110 ;;		wreg, status,2, status,0, cstack
  2111 ;; Tracked objects:
  2112 ;;		On entry : 0/0
  2113 ;;		On exit  : 0/0
  2114 ;;		Unchanged: 0/0
  2115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2117 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2119 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2120 ;;Total ram usage:        1 bytes
  2121 ;; Hardware stack levels used:    1
  2122 ;; Hardware stack levels required when called:    1
  2123 ;; This function calls:
  2124 ;;		_shortDelay
  2125 ;; This function is called by:
  2126 ;;		_displayLineOnLCD
  2127 ;;		_pressedKeyAction
  2128 ;;		_decode
  2129 ;;		_displayOne
  2130 ;;		_displayTwo
  2131 ;;		_displayThree
  2132 ;;		_displayFour
  2133 ;;		_displayFive
  2134 ;;		_displaySix
  2135 ;;		_displaySeven
  2136 ;;		_displayEight
  2137 ;;		_displayNine
  2138 ;;		_displayZero
  2139 ;; This function uses a non-reentrant model
  2140 ;;
  2141                           
  2142                           	psect	text19
  2143  00B89C                     __ptext19:
  2144                           	opt stack 0
  2145  00B89C                     _displayCharOnLCD:
  2146                           	opt stack 25
  2147                           
  2148                           ;incstack = 0
  2149                           ;displayCharOnLCD@character stored from wreg
  2150  00B89C  6E49               	movwf	displayCharOnLCD@character,c
  2151                           
  2152                           ;main.c: 174: PORTD = character;
  2153  00B89E  C049  FF83         	movff	displayCharOnLCD@character,3971	;volatile
  2154                           
  2155                           ;main.c: 175: PORTCbits.RC0 = 1;
  2156  00B8A2  8082               	bsf	3970,0,c	;volatile
  2157                           
  2158                           ;main.c: 176: PORTCbits.RC1 = 0;
  2159  00B8A4  9282               	bcf	3970,1,c	;volatile
  2160                           
  2161                           ;main.c: 177: PORTCbits.RC2 = 1;
  2162  00B8A6  8482               	bsf	3970,2,c	;volatile
  2163                           
  2164                           ;main.c: 178: shortDelay();
  2165  00B8A8  EC2F  F05C         	call	_shortDelay	;wreg free
  2166                           
  2167                           ;main.c: 179: PORTCbits.RC2 = 0;
  2168  00B8AC  9482               	bcf	3970,2,c	;volatile
  2169  00B8AE  0012               	return		;funcret
  2170  00B8B0                     __end_of_displayCharOnLCD:
  2171                           	opt stack 0
  2172                           tblptru	equ	0xFF8
  2173                           tblptrh	equ	0xFF7
  2174                           tblptrl	equ	0xFF6
  2175                           tablat	equ	0xFF5
  2176                           prodh	equ	0xFF4
  2177                           prodl	equ	0xFF3
  2178                           intcon2	equ	0xFF1
  2179                           postinc0	equ	0xFEE
  2180                           postdec1	equ	0xFE5
  2181                           fsr1l	equ	0xFE1
  2182                           indf2	equ	0xFDF
  2183                           postinc2	equ	0xFDE
  2184                           fsr2h	equ	0xFDA
  2185                           fsr2l	equ	0xFD9
  2186                           status	equ	0xFD8
  2187                           
  2188 ;; *************** function _checkDDRAM *****************
  2189 ;; Defined at:
  2190 ;;		line 123 in file "morse.c"
  2191 ;; Parameters:    Size  Location     Type
  2192 ;;		None
  2193 ;; Auto vars:     Size  Location     Type
  2194 ;;		None
  2195 ;; Return value:  Size  Location     Type
  2196 ;;                  1    wreg      void 
  2197 ;; Registers used:
  2198 ;;		wreg, status,2, status,0, cstack
  2199 ;; Tracked objects:
  2200 ;;		On entry : 0/0
  2201 ;;		On exit  : 0/0
  2202 ;;		Unchanged: 0/0
  2203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2208 ;;Total ram usage:        0 bytes
  2209 ;; Hardware stack levels used:    1
  2210 ;; Hardware stack levels required when called:    2
  2211 ;; This function calls:
  2212 ;;		_command
  2213 ;; This function is called by:
  2214 ;;		_decode
  2215 ;;		_displaySOS
  2216 ;; This function uses a non-reentrant model
  2217 ;;
  2218                           
  2219                           	psect	text20
  2220  00B9E6                     __ptext20:
  2221                           	opt stack 0
  2222  00B9E6                     _checkDDRAM:
  2223                           	opt stack 23
  2224                           
  2225                           ;morse.c: 124: if (DDRAMAddress == 14){
  2226                           
  2227                           ;incstack = 0
  2228  00B9E6  0E0E               	movlw	14
  2229  00B9E8  1854               	xorwf	_DDRAMAddress,w,c
  2230  00B9EA  A4D8               	btfss	status,2,c
  2231  00B9EC  D003               	goto	l1654
  2232                           
  2233                           ;morse.c: 125: command(0xC0);
  2234  00B9EE  0EC0               	movlw	192
  2235  00B9F0  EC44  F05C         	call	_command
  2236  00B9F4                     l1654:
  2237                           
  2238                           ;morse.c: 126: }
  2239                           ;morse.c: 127: if (DDRAMAddress >= 28){
  2240  00B9F4  0E1B               	movlw	27
  2241  00B9F6  6454               	cpfsgt	_DDRAMAddress,c
  2242  00B9F8  0012               	return	
  2243                           
  2244                           ;morse.c: 128: command(0x80);
  2245  00B9FA  0E80               	movlw	128
  2246  00B9FC  EC44  F05C         	call	_command
  2247                           
  2248                           ;morse.c: 129: DDRAMAddress = 0;
  2249  00BA00  0E00               	movlw	0
  2250  00BA02  6E54               	movwf	_DDRAMAddress,c
  2251  00BA04  0012               	return	
  2252  00BA06                     __end_of_checkDDRAM:
  2253                           	opt stack 0
  2254                           tblptru	equ	0xFF8
  2255                           tblptrh	equ	0xFF7
  2256                           tblptrl	equ	0xFF6
  2257                           tablat	equ	0xFF5
  2258                           prodh	equ	0xFF4
  2259                           prodl	equ	0xFF3
  2260                           intcon2	equ	0xFF1
  2261                           postinc0	equ	0xFEE
  2262                           postdec1	equ	0xFE5
  2263                           fsr1l	equ	0xFE1
  2264                           indf2	equ	0xFDF
  2265                           postinc2	equ	0xFDE
  2266                           fsr2h	equ	0xFDA
  2267                           fsr2l	equ	0xFD9
  2268                           status	equ	0xFD8
  2269                           
  2270 ;; *************** function _buzzerShort *****************
  2271 ;; Defined at:
  2272 ;;		line 18 in file "buzzer.c"
  2273 ;; Parameters:    Size  Location     Type
  2274 ;;		None
  2275 ;; Auto vars:     Size  Location     Type
  2276 ;;		None
  2277 ;; Return value:  Size  Location     Type
  2278 ;;                  1    wreg      void 
  2279 ;; Registers used:
  2280 ;;		wreg, status,2, status,0, cstack
  2281 ;; Tracked objects:
  2282 ;;		On entry : 0/0
  2283 ;;		On exit  : 0/0
  2284 ;;		Unchanged: 0/0
  2285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2290 ;;Total ram usage:        0 bytes
  2291 ;; Hardware stack levels used:    1
  2292 ;; Hardware stack levels required when called:    1
  2293 ;; This function calls:
  2294 ;;		_shortBuzzerDelay
  2295 ;; This function is called by:
  2296 ;;		_decode
  2297 ;; This function uses a non-reentrant model
  2298 ;;
  2299                           
  2300                           	psect	text21
  2301  00B87A                     __ptext21:
  2302                           	opt stack 0
  2303  00B87A                     _buzzerShort:
  2304                           	opt stack 24
  2305                           
  2306                           ;buzzer.c: 19: PORTCbits.RC7 = 1;
  2307                           
  2308                           ;incstack = 0
  2309  00B87A  8E82               	bsf	3970,7,c	;volatile
  2310                           
  2311                           ;buzzer.c: 20: shortBuzzerDelay();
  2312  00B87C  ECAB  F05D         	call	_shortBuzzerDelay	;wreg free
  2313                           
  2314                           ;buzzer.c: 21: PORTCbits.RC7 = 0;
  2315  00B880  9E82               	bcf	3970,7,c	;volatile
  2316                           
  2317                           ;buzzer.c: 22: shortBuzzerDelay();
  2318  00B882  ECAB  F05D         	call	_shortBuzzerDelay	;wreg free
  2319  00B886  0012               	return		;funcret
  2320  00B888                     __end_of_buzzerShort:
  2321                           	opt stack 0
  2322                           tblptru	equ	0xFF8
  2323                           tblptrh	equ	0xFF7
  2324                           tblptrl	equ	0xFF6
  2325                           tablat	equ	0xFF5
  2326                           prodh	equ	0xFF4
  2327                           prodl	equ	0xFF3
  2328                           intcon2	equ	0xFF1
  2329                           postinc0	equ	0xFEE
  2330                           postdec1	equ	0xFE5
  2331                           fsr1l	equ	0xFE1
  2332                           indf2	equ	0xFDF
  2333                           postinc2	equ	0xFDE
  2334                           fsr2h	equ	0xFDA
  2335                           fsr2l	equ	0xFD9
  2336                           status	equ	0xFD8
  2337                           
  2338 ;; *************** function _buzzerLong *****************
  2339 ;; Defined at:
  2340 ;;		line 25 in file "buzzer.c"
  2341 ;; Parameters:    Size  Location     Type
  2342 ;;		None
  2343 ;; Auto vars:     Size  Location     Type
  2344 ;;		None
  2345 ;; Return value:  Size  Location     Type
  2346 ;;                  1    wreg      void 
  2347 ;; Registers used:
  2348 ;;		wreg, status,2, status,0, cstack
  2349 ;; Tracked objects:
  2350 ;;		On entry : 0/0
  2351 ;;		On exit  : 0/0
  2352 ;;		Unchanged: 0/0
  2353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2358 ;;Total ram usage:        0 bytes
  2359 ;; Hardware stack levels used:    1
  2360 ;; Hardware stack levels required when called:    1
  2361 ;; This function calls:
  2362 ;;		_longBuzzerDelay
  2363 ;;		_shortBuzzerDelay
  2364 ;; This function is called by:
  2365 ;;		_decode
  2366 ;; This function uses a non-reentrant model
  2367 ;;
  2368                           
  2369                           	psect	text22
  2370  00B86C                     __ptext22:
  2371                           	opt stack 0
  2372  00B86C                     _buzzerLong:
  2373                           	opt stack 24
  2374                           
  2375                           ;buzzer.c: 26: PORTCbits.RC7 = 1;
  2376                           
  2377                           ;incstack = 0
  2378  00B86C  8E82               	bsf	3970,7,c	;volatile
  2379                           
  2380                           ;buzzer.c: 27: longBuzzerDelay();
  2381  00B86E  EC8C  F05D         	call	_longBuzzerDelay	;wreg free
  2382                           
  2383                           ;buzzer.c: 28: PORTCbits.RC7 = 0;
  2384  00B872  9E82               	bcf	3970,7,c	;volatile
  2385                           
  2386                           ;buzzer.c: 29: shortBuzzerDelay();
  2387  00B874  ECAB  F05D         	call	_shortBuzzerDelay	;wreg free
  2388  00B878  0012               	return		;funcret
  2389  00B87A                     __end_of_buzzerLong:
  2390                           	opt stack 0
  2391                           tblptru	equ	0xFF8
  2392                           tblptrh	equ	0xFF7
  2393                           tblptrl	equ	0xFF6
  2394                           tablat	equ	0xFF5
  2395                           prodh	equ	0xFF4
  2396                           prodl	equ	0xFF3
  2397                           intcon2	equ	0xFF1
  2398                           postinc0	equ	0xFEE
  2399                           postdec1	equ	0xFE5
  2400                           fsr1l	equ	0xFE1
  2401                           indf2	equ	0xFDF
  2402                           postinc2	equ	0xFDE
  2403                           fsr2h	equ	0xFDA
  2404                           fsr2l	equ	0xFD9
  2405                           status	equ	0xFD8
  2406                           
  2407 ;; *************** function _shortBuzzerDelay *****************
  2408 ;; Defined at:
  2409 ;;		line 32 in file "buzzer.c"
  2410 ;; Parameters:    Size  Location     Type
  2411 ;;		None
  2412 ;; Auto vars:     Size  Location     Type
  2413 ;;  L2REG           1    3[COMRAM] unsigned char 
  2414 ;;  L1REG           1    2[COMRAM] unsigned char 
  2415 ;;  L3REG           1    1[COMRAM] unsigned char 
  2416 ;; Return value:  Size  Location     Type
  2417 ;;                  1    wreg      void 
  2418 ;; Registers used:
  2419 ;;		wreg, status,2, status,0
  2420 ;; Tracked objects:
  2421 ;;		On entry : 0/0
  2422 ;;		On exit  : 0/0
  2423 ;;		Unchanged: 0/0
  2424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2426 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2427 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2428 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2429 ;;Total ram usage:        4 bytes
  2430 ;; Hardware stack levels used:    1
  2431 ;; This function calls:
  2432 ;;		Nothing
  2433 ;; This function is called by:
  2434 ;;		_buzzerShort
  2435 ;;		_buzzerLong
  2436 ;; This function uses a non-reentrant model
  2437 ;;
  2438                           
  2439                           	psect	text23
  2440  00BB56                     __ptext23:
  2441                           	opt stack 0
  2442  00BB56                     _shortBuzzerDelay:
  2443                           	opt stack 24
  2444                           
  2445                           ;buzzer.c: 33: unsigned char L3REG = 0;
  2446                           
  2447                           ;incstack = 0
  2448  00BB56  0E00               	movlw	0
  2449  00BB58  6E49               	movwf	shortBuzzerDelay@L3REG,c
  2450                           
  2451                           ;buzzer.c: 34: unsigned char L1REG = 0;
  2452  00BB5A  0E00               	movlw	0
  2453  00BB5C  6E4A               	movwf	shortBuzzerDelay@L1REG,c
  2454                           
  2455                           ;buzzer.c: 35: unsigned char L2REG = 0;
  2456  00BB5E  0E00               	movlw	0
  2457  00BB60  6E4B               	movwf	shortBuzzerDelay@L2REG,c
  2458                           
  2459                           ;buzzer.c: 37: while(L3REG++ < 2)
  2460  00BB62  D011               	goto	l1612
  2461  00BB64                     l1604:
  2462                           
  2463                           ;buzzer.c: 38: {
  2464                           ;buzzer.c: 39: L1REG = 0;
  2465  00BB64  0E00               	movlw	0
  2466  00BB66  6E4A               	movwf	shortBuzzerDelay@L1REG,c
  2467                           
  2468                           ;buzzer.c: 40: while(L1REG++ < 200){
  2469  00BB68  D008               	goto	l1610
  2470  00BB6A                     l1606:
  2471                           
  2472                           ;buzzer.c: 41: L2REG = 0;
  2473  00BB6A  0E00               	movlw	0
  2474  00BB6C  6E4B               	movwf	shortBuzzerDelay@L2REG,c
  2475  00BB6E                     l1608:
  2476  00BB6E  2A4B               	incf	shortBuzzerDelay@L2REG,f,c
  2477  00BB70  044B               	decf	shortBuzzerDelay@L2REG,w,c
  2478  00BB72  6E48               	movwf	??_shortBuzzerDelay& (0+255),c
  2479  00BB74  0EF9               	movlw	249
  2480  00BB76  6448               	cpfsgt	??_shortBuzzerDelay,c
  2481  00BB78  D7FA               	goto	l1608
  2482  00BB7A                     l1610:
  2483  00BB7A  2A4A               	incf	shortBuzzerDelay@L1REG,f,c
  2484  00BB7C  044A               	decf	shortBuzzerDelay@L1REG,w,c
  2485  00BB7E  6E48               	movwf	??_shortBuzzerDelay& (0+255),c
  2486  00BB80  0EC7               	movlw	199
  2487  00BB82  6448               	cpfsgt	??_shortBuzzerDelay,c
  2488  00BB84  D7F2               	goto	l1606
  2489  00BB86                     l1612:
  2490  00BB86  2A49               	incf	shortBuzzerDelay@L3REG,f,c
  2491  00BB88  0449               	decf	shortBuzzerDelay@L3REG,w,c
  2492  00BB8A  6E48               	movwf	??_shortBuzzerDelay& (0+255),c
  2493  00BB8C  0E01               	movlw	1
  2494  00BB8E  6448               	cpfsgt	??_shortBuzzerDelay,c
  2495  00BB90  D7E9               	goto	l1604
  2496  00BB92  0012               	return	
  2497  00BB94                     __end_of_shortBuzzerDelay:
  2498                           	opt stack 0
  2499                           tblptru	equ	0xFF8
  2500                           tblptrh	equ	0xFF7
  2501                           tblptrl	equ	0xFF6
  2502                           tablat	equ	0xFF5
  2503                           prodh	equ	0xFF4
  2504                           prodl	equ	0xFF3
  2505                           intcon2	equ	0xFF1
  2506                           postinc0	equ	0xFEE
  2507                           postdec1	equ	0xFE5
  2508                           fsr1l	equ	0xFE1
  2509                           indf2	equ	0xFDF
  2510                           postinc2	equ	0xFDE
  2511                           fsr2h	equ	0xFDA
  2512                           fsr2l	equ	0xFD9
  2513                           status	equ	0xFD8
  2514                           
  2515 ;; *************** function _longBuzzerDelay *****************
  2516 ;; Defined at:
  2517 ;;		line 47 in file "buzzer.c"
  2518 ;; Parameters:    Size  Location     Type
  2519 ;;		None
  2520 ;; Auto vars:     Size  Location     Type
  2521 ;;  L2REG           1    3[COMRAM] unsigned char 
  2522 ;;  L1REG           1    2[COMRAM] unsigned char 
  2523 ;;  L3REG           1    1[COMRAM] unsigned char 
  2524 ;; Return value:  Size  Location     Type
  2525 ;;                  1    wreg      void 
  2526 ;; Registers used:
  2527 ;;		wreg, status,2, status,0
  2528 ;; Tracked objects:
  2529 ;;		On entry : 0/0
  2530 ;;		On exit  : 0/0
  2531 ;;		Unchanged: 0/0
  2532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2534 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2535 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2536 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2537 ;;Total ram usage:        4 bytes
  2538 ;; Hardware stack levels used:    1
  2539 ;; This function calls:
  2540 ;;		Nothing
  2541 ;; This function is called by:
  2542 ;;		_buzzerLong
  2543 ;; This function uses a non-reentrant model
  2544 ;;
  2545                           
  2546                           	psect	text24
  2547  00BB18                     __ptext24:
  2548                           	opt stack 0
  2549  00BB18                     _longBuzzerDelay:
  2550                           	opt stack 24
  2551                           
  2552                           ;buzzer.c: 48: unsigned char L3REG = 0;
  2553                           
  2554                           ;incstack = 0
  2555  00BB18  0E00               	movlw	0
  2556  00BB1A  6E49               	movwf	longBuzzerDelay@L3REG,c
  2557                           
  2558                           ;buzzer.c: 49: unsigned char L1REG = 0;
  2559  00BB1C  0E00               	movlw	0
  2560  00BB1E  6E4A               	movwf	longBuzzerDelay@L1REG,c
  2561                           
  2562                           ;buzzer.c: 50: unsigned char L2REG = 0;
  2563  00BB20  0E00               	movlw	0
  2564  00BB22  6E4B               	movwf	longBuzzerDelay@L2REG,c
  2565                           
  2566                           ;buzzer.c: 52: while(L3REG++ < 4)
  2567  00BB24  D011               	goto	l1624
  2568  00BB26                     l1616:
  2569                           
  2570                           ;buzzer.c: 53: {
  2571                           ;buzzer.c: 54: L1REG = 0;
  2572  00BB26  0E00               	movlw	0
  2573  00BB28  6E4A               	movwf	longBuzzerDelay@L1REG,c
  2574                           
  2575                           ;buzzer.c: 55: while(L1REG++ < 200){
  2576  00BB2A  D008               	goto	l1622
  2577  00BB2C                     l1618:
  2578                           
  2579                           ;buzzer.c: 56: L2REG = 0;
  2580  00BB2C  0E00               	movlw	0
  2581  00BB2E  6E4B               	movwf	longBuzzerDelay@L2REG,c
  2582  00BB30                     l1620:
  2583  00BB30  2A4B               	incf	longBuzzerDelay@L2REG,f,c
  2584  00BB32  044B               	decf	longBuzzerDelay@L2REG,w,c
  2585  00BB34  6E48               	movwf	??_longBuzzerDelay& (0+255),c
  2586  00BB36  0EF9               	movlw	249
  2587  00BB38  6448               	cpfsgt	??_longBuzzerDelay,c
  2588  00BB3A  D7FA               	goto	l1620
  2589  00BB3C                     l1622:
  2590  00BB3C  2A4A               	incf	longBuzzerDelay@L1REG,f,c
  2591  00BB3E  044A               	decf	longBuzzerDelay@L1REG,w,c
  2592  00BB40  6E48               	movwf	??_longBuzzerDelay& (0+255),c
  2593  00BB42  0EC7               	movlw	199
  2594  00BB44  6448               	cpfsgt	??_longBuzzerDelay,c
  2595  00BB46  D7F2               	goto	l1618
  2596  00BB48                     l1624:
  2597  00BB48  2A49               	incf	longBuzzerDelay@L3REG,f,c
  2598  00BB4A  0449               	decf	longBuzzerDelay@L3REG,w,c
  2599  00BB4C  6E48               	movwf	??_longBuzzerDelay& (0+255),c
  2600  00BB4E  0E03               	movlw	3
  2601  00BB50  6448               	cpfsgt	??_longBuzzerDelay,c
  2602  00BB52  D7E9               	goto	l1616
  2603  00BB54  0012               	return	
  2604  00BB56                     __end_of_longBuzzerDelay:
  2605                           	opt stack 0
  2606                           tblptru	equ	0xFF8
  2607                           tblptrh	equ	0xFF7
  2608                           tblptrl	equ	0xFF6
  2609                           tablat	equ	0xFF5
  2610                           prodh	equ	0xFF4
  2611                           prodl	equ	0xFF3
  2612                           intcon2	equ	0xFF1
  2613                           postinc0	equ	0xFEE
  2614                           postdec1	equ	0xFE5
  2615                           fsr1l	equ	0xFE1
  2616                           indf2	equ	0xFDF
  2617                           postinc2	equ	0xFDE
  2618                           fsr2h	equ	0xFDA
  2619                           fsr2l	equ	0xFD9
  2620                           status	equ	0xFD8
  2621                           
  2622 ;; *************** function _getKeyCode *****************
  2623 ;; Defined at:
  2624 ;;		line 177 in file "matrix_keyboard.c"
  2625 ;; Parameters:    Size  Location     Type
  2626 ;;		None
  2627 ;; Auto vars:     Size  Location     Type
  2628 ;;		None
  2629 ;; Return value:  Size  Location     Type
  2630 ;;                  1    wreg      unsigned char 
  2631 ;; Registers used:
  2632 ;;		wreg, status,2, status,0
  2633 ;; Tracked objects:
  2634 ;;		On entry : 0/0
  2635 ;;		On exit  : 0/0
  2636 ;;		Unchanged: 0/0
  2637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2642 ;;Total ram usage:        0 bytes
  2643 ;; Hardware stack levels used:    1
  2644 ;; This function calls:
  2645 ;;		Nothing
  2646 ;; This function is called by:
  2647 ;;		_pressedKey
  2648 ;; This function uses a non-reentrant model
  2649 ;;
  2650                           
  2651                           	psect	text25
  2652  00BDFE                     __ptext25:
  2653                           	opt stack 0
  2654  00BDFE                     _getKeyCode:
  2655                           	opt stack 28
  2656                           
  2657                           ;matrix_keyboard.c: 178: if(rowSelected == 1){
  2658                           
  2659                           ;incstack = 0
  2660  00BDFE  0458               	decf	_rowSelected,w,c
  2661  00BE00  B4D8               	btfsc	status,2,c
  2662  00BE02  D009               	goto	l1384
  2663  00BE04  D016               	goto	l1386
  2664  00BE06                     l1366:
  2665  00BE06  0E31               	movlw	49
  2666  00BE08  0012               	return	
  2667  00BE0A                     l1370:
  2668  00BE0A  0E32               	movlw	50
  2669  00BE0C  0012               	return	
  2670  00BE0E                     l1374:
  2671  00BE0E  0E33               	movlw	51
  2672  00BE10  0012               	return	
  2673  00BE12                     l1378:
  2674  00BE12  0E41               	movlw	65
  2675  00BE14  0012               	return	
  2676  00BE16                     l1384:
  2677  00BE16  5055               	movf	_columnSelected,w,c
  2678                           
  2679                           ; Switch size 1, requested type "space"
  2680                           ; Number of cases is 4, Range of values is 1 to 4
  2681                           ; switch strategies available:
  2682                           ; Name         Instructions Cycles
  2683                           ; simple_byte           13     7 (average)
  2684                           ;	Chosen strategy is simple_byte
  2685  00BE18  0A01               	xorlw	1	; case 1
  2686  00BE1A  B4D8               	btfsc	status,2,c
  2687  00BE1C  D7F4               	goto	l1366
  2688  00BE1E  0A03               	xorlw	3	; case 2
  2689  00BE20  B4D8               	btfsc	status,2,c
  2690  00BE22  D7F3               	goto	l1370
  2691  00BE24  0A01               	xorlw	1	; case 3
  2692  00BE26  B4D8               	btfsc	status,2,c
  2693  00BE28  D7F2               	goto	l1374
  2694  00BE2A  0A07               	xorlw	7	; case 4
  2695  00BE2C  B4D8               	btfsc	status,2,c
  2696  00BE2E  D7F1               	goto	l1378
  2697                           
  2698                           ;matrix_keyboard.c: 185: }
  2699  00BE30  D050               	goto	l1458
  2700  00BE32                     l1386:
  2701                           
  2702                           ;matrix_keyboard.c: 186: else if(rowSelected == 2){
  2703  00BE32  0E02               	movlw	2
  2704  00BE34  1858               	xorwf	_rowSelected,w,c
  2705  00BE36  B4D8               	btfsc	status,2,c
  2706  00BE38  D009               	goto	l1408
  2707  00BE3A  D016               	goto	l1410
  2708  00BE3C                     l1390:
  2709  00BE3C  0E34               	movlw	52
  2710  00BE3E  0012               	return	
  2711  00BE40                     l1394:
  2712  00BE40  0E35               	movlw	53
  2713  00BE42  0012               	return	
  2714  00BE44                     l1398:
  2715  00BE44  0E36               	movlw	54
  2716  00BE46  0012               	return	
  2717  00BE48                     l1402:
  2718  00BE48  0E42               	movlw	66
  2719  00BE4A  0012               	return	
  2720  00BE4C                     l1408:
  2721  00BE4C  5055               	movf	_columnSelected,w,c
  2722                           
  2723                           ; Switch size 1, requested type "space"
  2724                           ; Number of cases is 4, Range of values is 1 to 4
  2725                           ; switch strategies available:
  2726                           ; Name         Instructions Cycles
  2727                           ; simple_byte           13     7 (average)
  2728                           ;	Chosen strategy is simple_byte
  2729  00BE4E  0A01               	xorlw	1	; case 1
  2730  00BE50  B4D8               	btfsc	status,2,c
  2731  00BE52  D7F4               	goto	l1390
  2732  00BE54  0A03               	xorlw	3	; case 2
  2733  00BE56  B4D8               	btfsc	status,2,c
  2734  00BE58  D7F3               	goto	l1394
  2735  00BE5A  0A01               	xorlw	1	; case 3
  2736  00BE5C  B4D8               	btfsc	status,2,c
  2737  00BE5E  D7F2               	goto	l1398
  2738  00BE60  0A07               	xorlw	7	; case 4
  2739  00BE62  B4D8               	btfsc	status,2,c
  2740  00BE64  D7F1               	goto	l1402
  2741                           
  2742                           ;matrix_keyboard.c: 193: }
  2743  00BE66  D035               	goto	l1458
  2744  00BE68                     l1410:
  2745                           
  2746                           ;matrix_keyboard.c: 194: else if(rowSelected == 3){
  2747  00BE68  0E03               	movlw	3
  2748  00BE6A  1858               	xorwf	_rowSelected,w,c
  2749  00BE6C  B4D8               	btfsc	status,2,c
  2750  00BE6E  D009               	goto	l1432
  2751  00BE70  D016               	goto	l1434
  2752  00BE72                     l1414:
  2753  00BE72  0E37               	movlw	55
  2754  00BE74  0012               	return	
  2755  00BE76                     l1418:
  2756  00BE76  0E38               	movlw	56
  2757  00BE78  0012               	return	
  2758  00BE7A                     l1422:
  2759  00BE7A  0E39               	movlw	57
  2760  00BE7C  0012               	return	
  2761  00BE7E                     l1426:
  2762  00BE7E  0E43               	movlw	67
  2763  00BE80  0012               	return	
  2764  00BE82                     l1432:
  2765  00BE82  5055               	movf	_columnSelected,w,c
  2766                           
  2767                           ; Switch size 1, requested type "space"
  2768                           ; Number of cases is 4, Range of values is 1 to 4
  2769                           ; switch strategies available:
  2770                           ; Name         Instructions Cycles
  2771                           ; simple_byte           13     7 (average)
  2772                           ;	Chosen strategy is simple_byte
  2773  00BE84  0A01               	xorlw	1	; case 1
  2774  00BE86  B4D8               	btfsc	status,2,c
  2775  00BE88  D7F4               	goto	l1414
  2776  00BE8A  0A03               	xorlw	3	; case 2
  2777  00BE8C  B4D8               	btfsc	status,2,c
  2778  00BE8E  D7F3               	goto	l1418
  2779  00BE90  0A01               	xorlw	1	; case 3
  2780  00BE92  B4D8               	btfsc	status,2,c
  2781  00BE94  D7F2               	goto	l1422
  2782  00BE96  0A07               	xorlw	7	; case 4
  2783  00BE98  B4D8               	btfsc	status,2,c
  2784  00BE9A  D7F1               	goto	l1426
  2785                           
  2786                           ;matrix_keyboard.c: 201: }
  2787  00BE9C  D01A               	goto	l1458
  2788  00BE9E                     l1434:
  2789                           
  2790                           ;matrix_keyboard.c: 202: else if(rowSelected == 4){
  2791  00BE9E  0E04               	movlw	4
  2792  00BEA0  1858               	xorwf	_rowSelected,w,c
  2793  00BEA2  B4D8               	btfsc	status,2,c
  2794  00BEA4  D009               	goto	l1456
  2795  00BEA6  D015               	goto	l1458
  2796  00BEA8                     l1438:
  2797  00BEA8  0E2A               	movlw	42
  2798  00BEAA  0012               	return	
  2799  00BEAC                     l1442:
  2800  00BEAC  0E30               	movlw	48
  2801  00BEAE  0012               	return	
  2802  00BEB0                     l1446:
  2803  00BEB0  0E23               	movlw	35
  2804  00BEB2  0012               	return	
  2805  00BEB4                     l1450:
  2806  00BEB4  0E44               	movlw	68
  2807  00BEB6  0012               	return	
  2808  00BEB8                     l1456:
  2809  00BEB8  5055               	movf	_columnSelected,w,c
  2810                           
  2811                           ; Switch size 1, requested type "space"
  2812                           ; Number of cases is 4, Range of values is 1 to 4
  2813                           ; switch strategies available:
  2814                           ; Name         Instructions Cycles
  2815                           ; simple_byte           13     7 (average)
  2816                           ;	Chosen strategy is simple_byte
  2817  00BEBA  0A01               	xorlw	1	; case 1
  2818  00BEBC  B4D8               	btfsc	status,2,c
  2819  00BEBE  D7F4               	goto	l1438
  2820  00BEC0  0A03               	xorlw	3	; case 2
  2821  00BEC2  B4D8               	btfsc	status,2,c
  2822  00BEC4  D7F3               	goto	l1442
  2823  00BEC6  0A01               	xorlw	1	; case 3
  2824  00BEC8  B4D8               	btfsc	status,2,c
  2825  00BECA  D7F2               	goto	l1446
  2826  00BECC  0A07               	xorlw	7	; case 4
  2827  00BECE  B4D8               	btfsc	status,2,c
  2828  00BED0  D7F1               	goto	l1450
  2829  00BED2                     l1458:
  2830                           
  2831                           ;matrix_keyboard.c: 209: }
  2832                           ;matrix_keyboard.c: 210: return -1;
  2833  00BED2  0EFF               	movlw	255
  2834  00BED4  0012               	return	
  2835  00BED6                     __end_of_getKeyCode:
  2836                           	opt stack 0
  2837                           tblptru	equ	0xFF8
  2838                           tblptrh	equ	0xFF7
  2839                           tblptrl	equ	0xFF6
  2840                           tablat	equ	0xFF5
  2841                           prodh	equ	0xFF4
  2842                           prodl	equ	0xFF3
  2843                           intcon2	equ	0xFF1
  2844                           postinc0	equ	0xFEE
  2845                           postdec1	equ	0xFE5
  2846                           fsr1l	equ	0xFE1
  2847                           indf2	equ	0xFDF
  2848                           postinc2	equ	0xFDE
  2849                           fsr2h	equ	0xFDA
  2850                           fsr2l	equ	0xFD9
  2851                           status	equ	0xFD8
  2852                           
  2853 ;; *************** function _determinePressedRow *****************
  2854 ;; Defined at:
  2855 ;;		line 89 in file "matrix_keyboard.c"
  2856 ;; Parameters:    Size  Location     Type
  2857 ;;		None
  2858 ;; Auto vars:     Size  Location     Type
  2859 ;;  i               1    0[COMRAM] unsigned char 
  2860 ;; Return value:  Size  Location     Type
  2861 ;;                  1    wreg      void 
  2862 ;; Registers used:
  2863 ;;		wreg, status,2, status,0, cstack
  2864 ;; Tracked objects:
  2865 ;;		On entry : 0/0
  2866 ;;		On exit  : 0/0
  2867 ;;		Unchanged: 0/0
  2868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2870 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2872 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2873 ;;Total ram usage:        1 bytes
  2874 ;; Hardware stack levels used:    1
  2875 ;; Hardware stack levels required when called:    1
  2876 ;; This function calls:
  2877 ;;		_turnOnAllRows
  2878 ;; This function is called by:
  2879 ;;		_pressedKey
  2880 ;; This function uses a non-reentrant model
  2881 ;;
  2882                           
  2883                           	psect	text26
  2884  00BED6                     __ptext26:
  2885                           	opt stack 0
  2886  00BED6                     _determinePressedRow:
  2887                           	opt stack 27
  2888                           
  2889                           ;matrix_keyboard.c: 90: char i;
  2890                           ;matrix_keyboard.c: 91: for(i=0; i<4; i++){
  2891                           
  2892                           ;incstack = 0
  2893  00BED6  0E00               	movlw	0
  2894  00BED8  6E48               	movwf	determinePressedRow@i,c
  2895  00BEDA                     l1220:
  2896  00BEDA  0E03               	movlw	3
  2897  00BEDC  6448               	cpfsgt	determinePressedRow@i,c
  2898  00BEDE  D001               	goto	l1224
  2899  00BEE0  0012               	return	
  2900  00BEE2                     l1224:
  2901                           
  2902                           ;matrix_keyboard.c: 92: turnOnAllRows();
  2903  00BEE2  EC2A  F05C         	call	_turnOnAllRows	;wreg free
  2904                           
  2905                           ;matrix_keyboard.c: 93: switch(i){
  2906  00BEE6  D07D               	goto	l1356
  2907  00BEE8                     l229:
  2908                           
  2909                           ;matrix_keyboard.c: 96: PORTBbits.RB0 = 0;
  2910  00BEE8  9081               	bcf	3969,0,c	;volatile
  2911                           
  2912                           ;matrix_keyboard.c: 97: if( (columnSelected == 1) && (PORTBbits.RB4 == 0)){
  2913  00BEEA  0455               	decf	_columnSelected,w,c
  2914  00BEEC  B4D8               	btfsc	status,2,c
  2915  00BEEE  B881               	btfsc	3969,4,c	;volatile
  2916  00BEF0  D003               	goto	l1234
  2917                           
  2918                           ;matrix_keyboard.c: 98: rowSelected = 1;
  2919  00BEF2  0E01               	movlw	1
  2920  00BEF4  6E58               	movwf	_rowSelected,c
  2921                           
  2922                           ;matrix_keyboard.c: 99: return;
  2923  00BEF6  0012               	return	
  2924  00BEF8                     l1234:
  2925                           
  2926                           ;matrix_keyboard.c: 100: }
  2927                           ;matrix_keyboard.c: 101: if( (columnSelected == 2) && (PORTBbits.RB5 == 0)){
  2928  00BEF8  0E02               	movlw	2
  2929  00BEFA  1855               	xorwf	_columnSelected,w,c
  2930  00BEFC  B4D8               	btfsc	status,2,c
  2931  00BEFE  BA81               	btfsc	3969,5,c	;volatile
  2932  00BF00  D003               	goto	l1242
  2933                           
  2934                           ;matrix_keyboard.c: 102: rowSelected = 1;
  2935  00BF02  0E01               	movlw	1
  2936  00BF04  6E58               	movwf	_rowSelected,c
  2937                           
  2938                           ;matrix_keyboard.c: 103: return;
  2939  00BF06  0012               	return	
  2940  00BF08                     l1242:
  2941                           
  2942                           ;matrix_keyboard.c: 104: }
  2943                           ;matrix_keyboard.c: 105: if( (columnSelected == 3) && (PORTBbits.RB6 == 0)){
  2944  00BF08  0E03               	movlw	3
  2945  00BF0A  1855               	xorwf	_columnSelected,w,c
  2946  00BF0C  B4D8               	btfsc	status,2,c
  2947  00BF0E  BC81               	btfsc	3969,6,c	;volatile
  2948  00BF10  D003               	goto	l1250
  2949                           
  2950                           ;matrix_keyboard.c: 106: rowSelected = 1;
  2951  00BF12  0E01               	movlw	1
  2952  00BF14  6E58               	movwf	_rowSelected,c
  2953                           
  2954                           ;matrix_keyboard.c: 107: return;
  2955  00BF16  0012               	return	
  2956  00BF18                     l1250:
  2957                           
  2958                           ;matrix_keyboard.c: 108: }
  2959                           ;matrix_keyboard.c: 109: if( (columnSelected == 4) && (PORTBbits.RB7 == 0)){
  2960  00BF18  0E04               	movlw	4
  2961  00BF1A  1855               	xorwf	_columnSelected,w,c
  2962  00BF1C  B4D8               	btfsc	status,2,c
  2963  00BF1E  BE81               	btfsc	3969,7,c	;volatile
  2964  00BF20  D06D               	goto	l1358
  2965                           
  2966                           ;matrix_keyboard.c: 110: rowSelected = 1;
  2967  00BF22  0E01               	movlw	1
  2968  00BF24                     L5:
  2969  00BF24  6E58               	movwf	_rowSelected,c
  2970                           
  2971                           ;matrix_keyboard.c: 111: return;
  2972  00BF26  0012               	return	
  2973  00BF28                     l236:
  2974                           
  2975                           ;matrix_keyboard.c: 115: PORTBbits.RB1 = 0;
  2976  00BF28  9281               	bcf	3969,1,c	;volatile
  2977                           
  2978                           ;matrix_keyboard.c: 116: if( (columnSelected == 1) && (PORTBbits.RB4 == 0)){
  2979  00BF2A  0455               	decf	_columnSelected,w,c
  2980  00BF2C  B4D8               	btfsc	status,2,c
  2981  00BF2E  B881               	btfsc	3969,4,c	;volatile
  2982  00BF30  D003               	goto	l1266
  2983                           
  2984                           ;matrix_keyboard.c: 117: rowSelected = 2;
  2985  00BF32  0E02               	movlw	2
  2986  00BF34  6E58               	movwf	_rowSelected,c
  2987                           
  2988                           ;matrix_keyboard.c: 118: return;
  2989  00BF36  0012               	return	
  2990  00BF38                     l1266:
  2991                           
  2992                           ;matrix_keyboard.c: 119: }
  2993                           ;matrix_keyboard.c: 120: if( (columnSelected == 2) && (PORTBbits.RB5 == 0)){
  2994  00BF38  0E02               	movlw	2
  2995  00BF3A  1855               	xorwf	_columnSelected,w,c
  2996  00BF3C  B4D8               	btfsc	status,2,c
  2997  00BF3E  BA81               	btfsc	3969,5,c	;volatile
  2998  00BF40  D003               	goto	l1274
  2999                           
  3000                           ;matrix_keyboard.c: 121: rowSelected = 2;
  3001  00BF42  0E02               	movlw	2
  3002  00BF44  6E58               	movwf	_rowSelected,c
  3003                           
  3004                           ;matrix_keyboard.c: 122: return;
  3005  00BF46  0012               	return	
  3006  00BF48                     l1274:
  3007                           
  3008                           ;matrix_keyboard.c: 123: }
  3009                           ;matrix_keyboard.c: 124: if( (columnSelected == 3) && (PORTBbits.RB6 == 0)){
  3010  00BF48  0E03               	movlw	3
  3011  00BF4A  1855               	xorwf	_columnSelected,w,c
  3012  00BF4C  B4D8               	btfsc	status,2,c
  3013  00BF4E  BC81               	btfsc	3969,6,c	;volatile
  3014  00BF50  D003               	goto	l1282
  3015                           
  3016                           ;matrix_keyboard.c: 125: rowSelected = 2;
  3017  00BF52  0E02               	movlw	2
  3018  00BF54  6E58               	movwf	_rowSelected,c
  3019                           
  3020                           ;matrix_keyboard.c: 126: return;
  3021  00BF56  0012               	return	
  3022  00BF58                     l1282:
  3023                           
  3024                           ;matrix_keyboard.c: 127: }
  3025                           ;matrix_keyboard.c: 128: if( (columnSelected == 4) && (PORTBbits.RB7 == 0)){
  3026  00BF58  0E04               	movlw	4
  3027  00BF5A  1855               	xorwf	_columnSelected,w,c
  3028  00BF5C  B4D8               	btfsc	status,2,c
  3029  00BF5E  BE81               	btfsc	3969,7,c	;volatile
  3030  00BF60  D04D               	goto	l1358
  3031                           
  3032                           ;matrix_keyboard.c: 129: rowSelected = 2;
  3033  00BF62  0E02               	movlw	2
  3034  00BF64  D7DF               	goto	L5
  3035  00BF66                     l241:
  3036                           
  3037                           ;matrix_keyboard.c: 134: PORTBbits.RB2 = 0;
  3038  00BF66  9481               	bcf	3969,2,c	;volatile
  3039                           
  3040                           ;matrix_keyboard.c: 135: if( (columnSelected == 1) && (PORTBbits.RB4 == 0)){
  3041  00BF68  0455               	decf	_columnSelected,w,c
  3042  00BF6A  B4D8               	btfsc	status,2,c
  3043  00BF6C  B881               	btfsc	3969,4,c	;volatile
  3044  00BF6E  D003               	goto	l1298
  3045                           
  3046                           ;matrix_keyboard.c: 136: rowSelected = 3;
  3047  00BF70  0E03               	movlw	3
  3048  00BF72  6E58               	movwf	_rowSelected,c
  3049                           
  3050                           ;matrix_keyboard.c: 137: return;
  3051  00BF74  0012               	return	
  3052  00BF76                     l1298:
  3053                           
  3054                           ;matrix_keyboard.c: 138: }
  3055                           ;matrix_keyboard.c: 139: if( (columnSelected == 2) && (PORTBbits.RB5 == 0)){
  3056  00BF76  0E02               	movlw	2
  3057  00BF78  1855               	xorwf	_columnSelected,w,c
  3058  00BF7A  B4D8               	btfsc	status,2,c
  3059  00BF7C  BA81               	btfsc	3969,5,c	;volatile
  3060  00BF7E  D003               	goto	l1306
  3061                           
  3062                           ;matrix_keyboard.c: 140: rowSelected = 3;
  3063  00BF80  0E03               	movlw	3
  3064  00BF82  6E58               	movwf	_rowSelected,c
  3065                           
  3066                           ;matrix_keyboard.c: 141: return;
  3067  00BF84  0012               	return	
  3068  00BF86                     l1306:
  3069                           
  3070                           ;matrix_keyboard.c: 142: }
  3071                           ;matrix_keyboard.c: 143: if( (columnSelected == 3) && (PORTBbits.RB6 == 0)){
  3072  00BF86  0E03               	movlw	3
  3073  00BF88  1855               	xorwf	_columnSelected,w,c
  3074  00BF8A  B4D8               	btfsc	status,2,c
  3075  00BF8C  BC81               	btfsc	3969,6,c	;volatile
  3076  00BF8E  D003               	goto	l1314
  3077                           
  3078                           ;matrix_keyboard.c: 144: rowSelected = 3;
  3079  00BF90  0E03               	movlw	3
  3080  00BF92  6E58               	movwf	_rowSelected,c
  3081                           
  3082                           ;matrix_keyboard.c: 145: return;
  3083  00BF94  0012               	return	
  3084  00BF96                     l1314:
  3085                           
  3086                           ;matrix_keyboard.c: 146: }
  3087                           ;matrix_keyboard.c: 147: if( (columnSelected == 4) && (PORTBbits.RB7 == 0)){
  3088  00BF96  0E04               	movlw	4
  3089  00BF98  1855               	xorwf	_columnSelected,w,c
  3090  00BF9A  B4D8               	btfsc	status,2,c
  3091  00BF9C  BE81               	btfsc	3969,7,c	;volatile
  3092  00BF9E  D02E               	goto	l1358
  3093                           
  3094                           ;matrix_keyboard.c: 148: rowSelected = 3;
  3095  00BFA0  0E03               	movlw	3
  3096  00BFA2  D7C0               	goto	L5
  3097  00BFA4                     l246:
  3098                           
  3099                           ;matrix_keyboard.c: 154: PORTBbits.RB3 = 0;
  3100  00BFA4  9681               	bcf	3969,3,c	;volatile
  3101                           
  3102                           ;matrix_keyboard.c: 155: if( (columnSelected == 1) && (PORTBbits.RB4 == 0)){
  3103  00BFA6  0455               	decf	_columnSelected,w,c
  3104  00BFA8  B4D8               	btfsc	status,2,c
  3105  00BFAA  B881               	btfsc	3969,4,c	;volatile
  3106  00BFAC  D003               	goto	l1330
  3107                           
  3108                           ;matrix_keyboard.c: 156: rowSelected = 4;
  3109  00BFAE  0E04               	movlw	4
  3110  00BFB0  6E58               	movwf	_rowSelected,c
  3111                           
  3112                           ;matrix_keyboard.c: 157: return;
  3113  00BFB2  0012               	return	
  3114  00BFB4                     l1330:
  3115                           
  3116                           ;matrix_keyboard.c: 158: }
  3117                           ;matrix_keyboard.c: 159: if( (columnSelected == 2) && (PORTBbits.RB5 == 0)){
  3118  00BFB4  0E02               	movlw	2
  3119  00BFB6  1855               	xorwf	_columnSelected,w,c
  3120  00BFB8  B4D8               	btfsc	status,2,c
  3121  00BFBA  BA81               	btfsc	3969,5,c	;volatile
  3122  00BFBC  D003               	goto	l1338
  3123                           
  3124                           ;matrix_keyboard.c: 160: rowSelected = 4;
  3125  00BFBE  0E04               	movlw	4
  3126  00BFC0  6E58               	movwf	_rowSelected,c
  3127                           
  3128                           ;matrix_keyboard.c: 161: return;
  3129  00BFC2  0012               	return	
  3130  00BFC4                     l1338:
  3131                           
  3132                           ;matrix_keyboard.c: 162: }
  3133                           ;matrix_keyboard.c: 163: if( (columnSelected == 3) && (PORTBbits.RB6 == 0)){
  3134  00BFC4  0E03               	movlw	3
  3135  00BFC6  1855               	xorwf	_columnSelected,w,c
  3136  00BFC8  B4D8               	btfsc	status,2,c
  3137  00BFCA  BC81               	btfsc	3969,6,c	;volatile
  3138  00BFCC  D003               	goto	l1346
  3139                           
  3140                           ;matrix_keyboard.c: 164: rowSelected = 4;
  3141  00BFCE  0E04               	movlw	4
  3142  00BFD0  6E58               	movwf	_rowSelected,c
  3143                           
  3144                           ;matrix_keyboard.c: 165: return;
  3145  00BFD2  0012               	return	
  3146  00BFD4                     l1346:
  3147                           
  3148                           ;matrix_keyboard.c: 166: }
  3149                           ;matrix_keyboard.c: 167: if( (columnSelected == 4) && (PORTBbits.RB7 == 0)){
  3150  00BFD4  0E04               	movlw	4
  3151  00BFD6  1855               	xorwf	_columnSelected,w,c
  3152  00BFD8  B4D8               	btfsc	status,2,c
  3153  00BFDA  BE81               	btfsc	3969,7,c	;volatile
  3154  00BFDC  D00F               	goto	l1358
  3155                           
  3156                           ;matrix_keyboard.c: 168: rowSelected = 4;
  3157  00BFDE  0E04               	movlw	4
  3158  00BFE0  D7A1               	goto	L5
  3159  00BFE2                     l1356:
  3160  00BFE2  5048               	movf	determinePressedRow@i,w,c
  3161                           
  3162                           ; Switch size 1, requested type "space"
  3163                           ; Number of cases is 4, Range of values is 0 to 3
  3164                           ; switch strategies available:
  3165                           ; Name         Instructions Cycles
  3166                           ; simple_byte           13     7 (average)
  3167                           ;	Chosen strategy is simple_byte
  3168  00BFE4  0A00               	xorlw	0	; case 0
  3169  00BFE6  B4D8               	btfsc	status,2,c
  3170  00BFE8  D77F               	goto	l229
  3171  00BFEA  0A01               	xorlw	1	; case 1
  3172  00BFEC  B4D8               	btfsc	status,2,c
  3173  00BFEE  D79C               	goto	l236
  3174  00BFF0  0A03               	xorlw	3	; case 2
  3175  00BFF2  B4D8               	btfsc	status,2,c
  3176  00BFF4  D7B8               	goto	l241
  3177  00BFF6  0A01               	xorlw	1	; case 3
  3178  00BFF8  B4D8               	btfsc	status,2,c
  3179  00BFFA  D7D4               	goto	l246
  3180  00BFFC                     l1358:
  3181  00BFFC  2A48               	incf	determinePressedRow@i,f,c
  3182  00BFFE  D76D               	goto	l1220
  3183  00C000                     __end_of_determinePressedRow:
  3184                           	opt stack 0
  3185                           tblptru	equ	0xFF8
  3186                           tblptrh	equ	0xFF7
  3187                           tblptrl	equ	0xFF6
  3188                           tablat	equ	0xFF5
  3189                           prodh	equ	0xFF4
  3190                           prodl	equ	0xFF3
  3191                           intcon2	equ	0xFF1
  3192                           postinc0	equ	0xFEE
  3193                           postdec1	equ	0xFE5
  3194                           fsr1l	equ	0xFE1
  3195                           indf2	equ	0xFDF
  3196                           postinc2	equ	0xFDE
  3197                           fsr2h	equ	0xFDA
  3198                           fsr2l	equ	0xFD9
  3199                           status	equ	0xFD8
  3200                           
  3201 ;; *************** function _turnOnAllRows *****************
  3202 ;; Defined at:
  3203 ;;		line 82 in file "matrix_keyboard.c"
  3204 ;; Parameters:    Size  Location     Type
  3205 ;;		None
  3206 ;; Auto vars:     Size  Location     Type
  3207 ;;		None
  3208 ;; Return value:  Size  Location     Type
  3209 ;;                  1    wreg      void 
  3210 ;; Registers used:
  3211 ;;		None
  3212 ;; Tracked objects:
  3213 ;;		On entry : 0/0
  3214 ;;		On exit  : 0/0
  3215 ;;		Unchanged: 0/0
  3216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3221 ;;Total ram usage:        0 bytes
  3222 ;; Hardware stack levels used:    1
  3223 ;; This function calls:
  3224 ;;		Nothing
  3225 ;; This function is called by:
  3226 ;;		_determinePressedRow
  3227 ;; This function uses a non-reentrant model
  3228 ;;
  3229                           
  3230                           	psect	text27
  3231  00B854                     __ptext27:
  3232                           	opt stack 0
  3233  00B854                     _turnOnAllRows:
  3234                           	opt stack 27
  3235                           
  3236                           ;matrix_keyboard.c: 83: PORTBbits.RB0 = 1;
  3237                           
  3238                           ;incstack = 0
  3239  00B854  8081               	bsf	3969,0,c	;volatile
  3240                           
  3241                           ;matrix_keyboard.c: 84: PORTBbits.RB1 = 1;
  3242  00B856  8281               	bsf	3969,1,c	;volatile
  3243                           
  3244                           ;matrix_keyboard.c: 85: PORTBbits.RB2 = 1;
  3245  00B858  8481               	bsf	3969,2,c	;volatile
  3246                           
  3247                           ;matrix_keyboard.c: 86: PORTBbits.RB3 = 1;
  3248  00B85A  8681               	bsf	3969,3,c	;volatile
  3249  00B85C  0012               	return		;funcret
  3250  00B85E                     __end_of_turnOnAllRows:
  3251                           	opt stack 0
  3252                           tblptru	equ	0xFF8
  3253                           tblptrh	equ	0xFF7
  3254                           tblptrl	equ	0xFF6
  3255                           tablat	equ	0xFF5
  3256                           prodh	equ	0xFF4
  3257                           prodl	equ	0xFF3
  3258                           intcon2	equ	0xFF1
  3259                           postinc0	equ	0xFEE
  3260                           postdec1	equ	0xFE5
  3261                           fsr1l	equ	0xFE1
  3262                           indf2	equ	0xFDF
  3263                           postinc2	equ	0xFDE
  3264                           fsr2h	equ	0xFDA
  3265                           fsr2l	equ	0xFD9
  3266                           status	equ	0xFD8
  3267                           
  3268 ;; *************** function _delay *****************
  3269 ;; Defined at:
  3270 ;;		line 73 in file "matrix_keyboard.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;		None
  3273 ;; Auto vars:     Size  Location     Type
  3274 ;;  L2REG           1    2[COMRAM] unsigned char 
  3275 ;;  L1REG           1    1[COMRAM] unsigned char 
  3276 ;; Return value:  Size  Location     Type
  3277 ;;                  1    wreg      void 
  3278 ;; Registers used:
  3279 ;;		wreg, status,2, status,0
  3280 ;; Tracked objects:
  3281 ;;		On entry : 0/0
  3282 ;;		On exit  : 0/0
  3283 ;;		Unchanged: 0/0
  3284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3286 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3287 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3288 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3289 ;;Total ram usage:        3 bytes
  3290 ;; Hardware stack levels used:    1
  3291 ;; This function calls:
  3292 ;;		Nothing
  3293 ;; This function is called by:
  3294 ;;		_oneShot
  3295 ;;		_resetOneShot
  3296 ;; This function uses a non-reentrant model
  3297 ;;
  3298                           
  3299                           	psect	text28
  3300  00B9AE                     __ptext28:
  3301                           	opt stack 0
  3302  00B9AE                     _delay:
  3303                           	opt stack 29
  3304                           
  3305                           ;matrix_keyboard.c: 74: unsigned char L1REG = 0;
  3306                           
  3307                           ;incstack = 0
  3308  00B9AE  0E00               	movlw	0
  3309  00B9B0  6E49               	movwf	delay@L1REG,c
  3310                           
  3311                           ;matrix_keyboard.c: 75: unsigned char L2REG;
  3312                           ;matrix_keyboard.c: 76: while(L1REG++ < 13){
  3313  00B9B2  D004               	goto	l1510
  3314  00B9B4                     l1508:
  3315                           
  3316                           ;matrix_keyboard.c: 77: L2REG = 0;
  3317  00B9B4  0E00               	movlw	0
  3318  00B9B6  6E4A               	movwf	delay@L2REG,c
  3319  00B9B8                     l216:
  3320  00B9B8  3E4A               	incfsz	delay@L2REG,f,c
  3321  00B9BA  D7FE               	goto	l216
  3322  00B9BC                     l1510:
  3323  00B9BC  2A49               	incf	delay@L1REG,f,c
  3324  00B9BE  0449               	decf	delay@L1REG,w,c
  3325  00B9C0  6E48               	movwf	??_delay& (0+255),c
  3326  00B9C2  0E0C               	movlw	12
  3327  00B9C4  6448               	cpfsgt	??_delay,c
  3328  00B9C6  D7F6               	goto	l1508
  3329  00B9C8  0012               	return	
  3330  00B9CA                     __end_of_delay:
  3331                           	opt stack 0
  3332                           tblptru	equ	0xFF8
  3333                           tblptrh	equ	0xFF7
  3334                           tblptrl	equ	0xFF6
  3335                           tablat	equ	0xFF5
  3336                           prodh	equ	0xFF4
  3337                           prodl	equ	0xFF3
  3338                           intcon2	equ	0xFF1
  3339                           postinc0	equ	0xFEE
  3340                           postdec1	equ	0xFE5
  3341                           fsr1l	equ	0xFE1
  3342                           indf2	equ	0xFDF
  3343                           postinc2	equ	0xFDE
  3344                           fsr2h	equ	0xFDA
  3345                           fsr2l	equ	0xFD9
  3346                           status	equ	0xFD8
  3347                           
  3348 ;; *************** function _groundAllRows *****************
  3349 ;; Defined at:
  3350 ;;		line 43 in file "matrix_keyboard.c"
  3351 ;; Parameters:    Size  Location     Type
  3352 ;;		None
  3353 ;; Auto vars:     Size  Location     Type
  3354 ;;		None
  3355 ;; Return value:  Size  Location     Type
  3356 ;;                  1    wreg      void 
  3357 ;; Registers used:
  3358 ;;		None
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3367 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3368 ;;Total ram usage:        0 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; This function calls:
  3371 ;;		Nothing
  3372 ;; This function is called by:
  3373 ;;		_main
  3374 ;; This function uses a non-reentrant model
  3375 ;;
  3376                           
  3377                           	psect	text29
  3378  00B84A                     __ptext29:
  3379                           	opt stack 0
  3380  00B84A                     _groundAllRows:
  3381                           	opt stack 30
  3382                           
  3383                           ;matrix_keyboard.c: 44: PORTBbits.RB0 = 0;
  3384                           
  3385                           ;incstack = 0
  3386  00B84A  9081               	bcf	3969,0,c	;volatile
  3387                           
  3388                           ;matrix_keyboard.c: 45: PORTBbits.RB1 = 0;
  3389  00B84C  9281               	bcf	3969,1,c	;volatile
  3390                           
  3391                           ;matrix_keyboard.c: 46: PORTBbits.RB2 = 0;
  3392  00B84E  9481               	bcf	3969,2,c	;volatile
  3393                           
  3394                           ;matrix_keyboard.c: 47: PORTBbits.RB3 = 0;
  3395  00B850  9681               	bcf	3969,3,c	;volatile
  3396  00B852  0012               	return		;funcret
  3397  00B854                     __end_of_groundAllRows:
  3398                           	opt stack 0
  3399                           tblptru	equ	0xFF8
  3400                           tblptrh	equ	0xFF7
  3401                           tblptrl	equ	0xFF6
  3402                           tablat	equ	0xFF5
  3403                           prodh	equ	0xFF4
  3404                           prodl	equ	0xFF3
  3405                           intcon2	equ	0xFF1
  3406                           postinc0	equ	0xFEE
  3407                           postdec1	equ	0xFE5
  3408                           fsr1l	equ	0xFE1
  3409                           indf2	equ	0xFDF
  3410                           postinc2	equ	0xFDE
  3411                           fsr2h	equ	0xFDA
  3412                           fsr2l	equ	0xFD9
  3413                           status	equ	0xFD8
  3414                           
  3415 ;; *************** function _LCDSetup *****************
  3416 ;; Defined at:
  3417 ;;		line 119 in file "main.c"
  3418 ;; Parameters:    Size  Location     Type
  3419 ;;		None
  3420 ;; Auto vars:     Size  Location     Type
  3421 ;;		None
  3422 ;; Return value:  Size  Location     Type
  3423 ;;                  1    wreg      void 
  3424 ;; Registers used:
  3425 ;;		wreg, status,2, status,0, cstack
  3426 ;; Tracked objects:
  3427 ;;		On entry : 0/0
  3428 ;;		On exit  : 0/0
  3429 ;;		Unchanged: 0/0
  3430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3434 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3435 ;;Total ram usage:        0 bytes
  3436 ;; Hardware stack levels used:    1
  3437 ;; Hardware stack levels required when called:    2
  3438 ;; This function calls:
  3439 ;;		_command
  3440 ;;		_isReady
  3441 ;;		_longDelay
  3442 ;; This function is called by:
  3443 ;;		_main
  3444 ;; This function uses a non-reentrant model
  3445 ;;
  3446                           
  3447                           	psect	text30
  3448  00BA06                     __ptext30:
  3449                           	opt stack 0
  3450  00BA06                     _LCDSetup:
  3451                           	opt stack 28
  3452                           
  3453                           ;main.c: 120: PORTCbits.RC2 = 0;
  3454                           
  3455                           ;incstack = 0
  3456  00BA06  9482               	bcf	3970,2,c	;volatile
  3457                           
  3458                           ;main.c: 121: longDelay();
  3459  00BA08  EC40  F05D         	call	_longDelay	;wreg free
  3460                           
  3461                           ;main.c: 122: command(0x38);
  3462  00BA0C  0E38               	movlw	56
  3463  00BA0E  EC44  F05C         	call	_command
  3464                           
  3465                           ;main.c: 123: longDelay();
  3466  00BA12  EC40  F05D         	call	_longDelay	;wreg free
  3467                           
  3468                           ;main.c: 124: command(0x0F);
  3469  00BA16  0E0F               	movlw	15
  3470  00BA18  EC44  F05C         	call	_command
  3471                           
  3472                           ;main.c: 125: isReady();
  3473  00BA1C  ECC9  F05C         	call	_isReady	;wreg free
  3474                           
  3475                           ;main.c: 126: command(0x01);
  3476  00BA20  0E01               	movlw	1
  3477  00BA22  EC44  F05C         	call	_command
  3478                           
  3479                           ;main.c: 127: isReady();
  3480  00BA26  ECC9  F05C         	call	_isReady	;wreg free
  3481  00BA2A  0012               	return		;funcret
  3482  00BA2C                     __end_of_LCDSetup:
  3483                           	opt stack 0
  3484                           tblptru	equ	0xFF8
  3485                           tblptrh	equ	0xFF7
  3486                           tblptrl	equ	0xFF6
  3487                           tablat	equ	0xFF5
  3488                           prodh	equ	0xFF4
  3489                           prodl	equ	0xFF3
  3490                           intcon2	equ	0xFF1
  3491                           postinc0	equ	0xFEE
  3492                           postdec1	equ	0xFE5
  3493                           fsr1l	equ	0xFE1
  3494                           indf2	equ	0xFDF
  3495                           postinc2	equ	0xFDE
  3496                           fsr2h	equ	0xFDA
  3497                           fsr2l	equ	0xFD9
  3498                           status	equ	0xFD8
  3499                           
  3500 ;; *************** function _longDelay *****************
  3501 ;; Defined at:
  3502 ;;		line 137 in file "main.c"
  3503 ;; Parameters:    Size  Location     Type
  3504 ;;		None
  3505 ;; Auto vars:     Size  Location     Type
  3506 ;;  L3REG           1    2[COMRAM] unsigned char 
  3507 ;;  L2REG           1    1[COMRAM] unsigned char 
  3508 ;;  L1REG           1    0[COMRAM] unsigned char 
  3509 ;; Return value:  Size  Location     Type
  3510 ;;                  1    wreg      void 
  3511 ;; Registers used:
  3512 ;;		wreg, status,2, status,0
  3513 ;; Tracked objects:
  3514 ;;		On entry : 0/0
  3515 ;;		On exit  : 0/0
  3516 ;;		Unchanged: 0/0
  3517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3519 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3521 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3522 ;;Total ram usage:        3 bytes
  3523 ;; Hardware stack levels used:    1
  3524 ;; This function calls:
  3525 ;;		Nothing
  3526 ;; This function is called by:
  3527 ;;		_LCDSetup
  3528 ;; This function uses a non-reentrant model
  3529 ;;
  3530                           
  3531                           	psect	text31
  3532  00BA80                     __ptext31:
  3533                           	opt stack 0
  3534  00BA80                     _longDelay:
  3535                           	opt stack 29
  3536                           
  3537                           ;main.c: 138: unsigned char L1REG = 2;
  3538                           
  3539                           ;incstack = 0
  3540  00BA80  0E02               	movlw	2
  3541  00BA82  6E48               	movwf	longDelay@L1REG,c
  3542                           
  3543                           ;main.c: 139: unsigned char L2REG = 162;
  3544  00BA84  0EA2               	movlw	162
  3545  00BA86  6E49               	movwf	longDelay@L2REG,c
  3546                           
  3547                           ;main.c: 140: unsigned char L3REG = 255;
  3548  00BA88  684A               	setf	longDelay@L3REG,c
  3549                           
  3550                           ;main.c: 142: while(L1REG-- > 0){
  3551  00BA8A  D00C               	goto	l1504
  3552  00BA8C                     l1498:
  3553                           
  3554                           ;main.c: 143: L2REG = 162;
  3555  00BA8C  0EA2               	movlw	162
  3556  00BA8E  6E49               	movwf	longDelay@L2REG,c
  3557                           
  3558                           ;main.c: 144: while(L2REG-- > 0){
  3559  00BA90  D005               	goto	l1502
  3560  00BA92                     l91:
  3561                           
  3562                           ;main.c: 145: L3REG = 255;
  3563  00BA92  684A               	setf	longDelay@L3REG,c
  3564  00BA94                     l1500:
  3565  00BA94  064A               	decf	longDelay@L3REG,f,c
  3566  00BA96  284A               	incf	longDelay@L3REG,w,c
  3567  00BA98  A4D8               	btfss	status,2,c
  3568  00BA9A  D7FC               	goto	l1500
  3569  00BA9C                     l1502:
  3570  00BA9C  0649               	decf	longDelay@L2REG,f,c
  3571  00BA9E  2849               	incf	longDelay@L2REG,w,c
  3572  00BAA0  A4D8               	btfss	status,2,c
  3573  00BAA2  D7F7               	goto	l91
  3574  00BAA4                     l1504:
  3575  00BAA4  0648               	decf	longDelay@L1REG,f,c
  3576  00BAA6  2848               	incf	longDelay@L1REG,w,c
  3577  00BAA8  B4D8               	btfsc	status,2,c
  3578  00BAAA  0012               	return	
  3579  00BAAC  D7EF               	goto	l1498
  3580  00BAAE                     __end_of_longDelay:
  3581                           	opt stack 0
  3582                           tblptru	equ	0xFF8
  3583                           tblptrh	equ	0xFF7
  3584                           tblptrl	equ	0xFF6
  3585                           tablat	equ	0xFF5
  3586                           prodh	equ	0xFF4
  3587                           prodl	equ	0xFF3
  3588                           intcon2	equ	0xFF1
  3589                           postinc0	equ	0xFEE
  3590                           postdec1	equ	0xFE5
  3591                           fsr1l	equ	0xFE1
  3592                           indf2	equ	0xFDF
  3593                           postinc2	equ	0xFDE
  3594                           fsr2h	equ	0xFDA
  3595                           fsr2l	equ	0xFD9
  3596                           status	equ	0xFD8
  3597                           
  3598 ;; *************** function _isReady *****************
  3599 ;; Defined at:
  3600 ;;		line 160 in file "main.c"
  3601 ;; Parameters:    Size  Location     Type
  3602 ;;		None
  3603 ;; Auto vars:     Size  Location     Type
  3604 ;;		None
  3605 ;; Return value:  Size  Location     Type
  3606 ;;                  1    wreg      void 
  3607 ;; Registers used:
  3608 ;;		wreg, status,2, status,0, cstack
  3609 ;; Tracked objects:
  3610 ;;		On entry : 0/0
  3611 ;;		On exit  : 0/0
  3612 ;;		Unchanged: 0/0
  3613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3618 ;;Total ram usage:        0 bytes
  3619 ;; Hardware stack levels used:    1
  3620 ;; Hardware stack levels required when called:    1
  3621 ;; This function calls:
  3622 ;;		_portDAsInput
  3623 ;;		_portDAsOutput
  3624 ;;		_shortDelay
  3625 ;; This function is called by:
  3626 ;;		_LCDSetup
  3627 ;;		_pressedKeyAction
  3628 ;; This function uses a non-reentrant model
  3629 ;;
  3630                           
  3631                           	psect	text32
  3632  00B992                     __ptext32:
  3633                           	opt stack 0
  3634  00B992                     _isReady:
  3635                           	opt stack 26
  3636                           
  3637                           ;main.c: 161: portDAsInput();
  3638                           
  3639                           ;incstack = 0
  3640  00B992  EC20  F05C         	call	_portDAsInput	;wreg free
  3641                           
  3642                           ;main.c: 162: PORTCbits.RC0 = 0;
  3643  00B996  9082               	bcf	3970,0,c	;volatile
  3644                           
  3645                           ;main.c: 163: PORTCbits.RC1 = 1;
  3646  00B998  8282               	bsf	3970,1,c	;volatile
  3647                           
  3648                           ;main.c: 165: while(PORTDbits.RD7 == 1){
  3649  00B99A  D004               	goto	l1716
  3650  00B99C                     l104:
  3651                           
  3652                           ;main.c: 166: PORTCbits.RC2 = 1;
  3653  00B99C  8482               	bsf	3970,2,c	;volatile
  3654                           
  3655                           ;main.c: 167: shortDelay();
  3656  00B99E  EC2F  F05C         	call	_shortDelay	;wreg free
  3657                           
  3658                           ;main.c: 168: PORTCbits.RC2 = 0;
  3659  00B9A2  9482               	bcf	3970,2,c	;volatile
  3660  00B9A4                     l1716:
  3661  00B9A4  BE83               	btfsc	3971,7,c	;volatile
  3662  00B9A6  D7FA               	goto	l104
  3663                           
  3664                           ;main.c: 169: }
  3665                           ;main.c: 170: portDAsOutput();
  3666  00B9A8  EC22  F05C         	call	_portDAsOutput	;wreg free
  3667  00B9AC  0012               	return		;funcret
  3668  00B9AE                     __end_of_isReady:
  3669                           	opt stack 0
  3670                           tblptru	equ	0xFF8
  3671                           tblptrh	equ	0xFF7
  3672                           tblptrl	equ	0xFF6
  3673                           tablat	equ	0xFF5
  3674                           prodh	equ	0xFF4
  3675                           prodl	equ	0xFF3
  3676                           intcon2	equ	0xFF1
  3677                           postinc0	equ	0xFEE
  3678                           postdec1	equ	0xFE5
  3679                           fsr1l	equ	0xFE1
  3680                           indf2	equ	0xFDF
  3681                           postinc2	equ	0xFDE
  3682                           fsr2h	equ	0xFDA
  3683                           fsr2l	equ	0xFD9
  3684                           status	equ	0xFD8
  3685                           
  3686 ;; *************** function _portDAsOutput *****************
  3687 ;; Defined at:
  3688 ;;		line 115 in file "main.c"
  3689 ;; Parameters:    Size  Location     Type
  3690 ;;		None
  3691 ;; Auto vars:     Size  Location     Type
  3692 ;;		None
  3693 ;; Return value:  Size  Location     Type
  3694 ;;                  1    wreg      void 
  3695 ;; Registers used:
  3696 ;;		wreg, status,2
  3697 ;; Tracked objects:
  3698 ;;		On entry : 0/0
  3699 ;;		On exit  : 0/0
  3700 ;;		Unchanged: 0/0
  3701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3706 ;;Total ram usage:        0 bytes
  3707 ;; Hardware stack levels used:    1
  3708 ;; This function calls:
  3709 ;;		Nothing
  3710 ;; This function is called by:
  3711 ;;		_main
  3712 ;;		_isReady
  3713 ;; This function uses a non-reentrant model
  3714 ;;
  3715                           
  3716                           	psect	text33
  3717  00B844                     __ptext33:
  3718                           	opt stack 0
  3719  00B844                     _portDAsOutput:
  3720                           	opt stack 30
  3721                           
  3722                           ;main.c: 116: TRISD = 0x00;
  3723                           
  3724                           ;incstack = 0
  3725  00B844  0E00               	movlw	0
  3726  00B846  6E95               	movwf	3989,c	;volatile
  3727  00B848  0012               	return		;funcret
  3728  00B84A                     __end_of_portDAsOutput:
  3729                           	opt stack 0
  3730                           tblptru	equ	0xFF8
  3731                           tblptrh	equ	0xFF7
  3732                           tblptrl	equ	0xFF6
  3733                           tablat	equ	0xFF5
  3734                           prodh	equ	0xFF4
  3735                           prodl	equ	0xFF3
  3736                           intcon2	equ	0xFF1
  3737                           postinc0	equ	0xFEE
  3738                           postdec1	equ	0xFE5
  3739                           fsr1l	equ	0xFE1
  3740                           indf2	equ	0xFDF
  3741                           postinc2	equ	0xFDE
  3742                           fsr2h	equ	0xFDA
  3743                           fsr2l	equ	0xFD9
  3744                           status	equ	0xFD8
  3745                           
  3746 ;; *************** function _portDAsInput *****************
  3747 ;; Defined at:
  3748 ;;		line 111 in file "main.c"
  3749 ;; Parameters:    Size  Location     Type
  3750 ;;		None
  3751 ;; Auto vars:     Size  Location     Type
  3752 ;;		None
  3753 ;; Return value:  Size  Location     Type
  3754 ;;                  1    wreg      void 
  3755 ;; Registers used:
  3756 ;;		None
  3757 ;; Tracked objects:
  3758 ;;		On entry : 0/0
  3759 ;;		On exit  : 0/0
  3760 ;;		Unchanged: 0/0
  3761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3766 ;;Total ram usage:        0 bytes
  3767 ;; Hardware stack levels used:    1
  3768 ;; This function calls:
  3769 ;;		Nothing
  3770 ;; This function is called by:
  3771 ;;		_isReady
  3772 ;; This function uses a non-reentrant model
  3773 ;;
  3774                           
  3775                           	psect	text34
  3776  00B840                     __ptext34:
  3777                           	opt stack 0
  3778  00B840                     _portDAsInput:
  3779                           	opt stack 26
  3780                           
  3781                           ;main.c: 112: TRISD = 0xFF;
  3782                           
  3783                           ;incstack = 0
  3784  00B840  6895               	setf	3989,c	;volatile
  3785  00B842  0012               	return		;funcret
  3786  00B844                     __end_of_portDAsInput:
  3787                           	opt stack 0
  3788                           tblptru	equ	0xFF8
  3789                           tblptrh	equ	0xFF7
  3790                           tblptrl	equ	0xFF6
  3791                           tablat	equ	0xFF5
  3792                           prodh	equ	0xFF4
  3793                           prodl	equ	0xFF3
  3794                           intcon2	equ	0xFF1
  3795                           postinc0	equ	0xFEE
  3796                           postdec1	equ	0xFE5
  3797                           fsr1l	equ	0xFE1
  3798                           indf2	equ	0xFDF
  3799                           postinc2	equ	0xFDE
  3800                           fsr2h	equ	0xFDA
  3801                           fsr2l	equ	0xFD9
  3802                           status	equ	0xFD8
  3803                           
  3804 ;; *************** function _command *****************
  3805 ;; Defined at:
  3806 ;;		line 151 in file "main.c"
  3807 ;; Parameters:    Size  Location     Type
  3808 ;;  x               1    wreg     unsigned char 
  3809 ;; Auto vars:     Size  Location     Type
  3810 ;;  x               1    1[COMRAM] unsigned char 
  3811 ;; Return value:  Size  Location     Type
  3812 ;;                  1    wreg      void 
  3813 ;; Registers used:
  3814 ;;		wreg, status,2, status,0, cstack
  3815 ;; Tracked objects:
  3816 ;;		On entry : 0/0
  3817 ;;		On exit  : 0/0
  3818 ;;		Unchanged: 0/0
  3819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3821 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3823 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3824 ;;Total ram usage:        1 bytes
  3825 ;; Hardware stack levels used:    1
  3826 ;; Hardware stack levels required when called:    1
  3827 ;; This function calls:
  3828 ;;		_shortDelay
  3829 ;; This function is called by:
  3830 ;;		_LCDSetup
  3831 ;;		_pressedKeyAction
  3832 ;;		_checkDDRAM
  3833 ;; This function uses a non-reentrant model
  3834 ;;
  3835                           
  3836                           	psect	text35
  3837  00B888                     __ptext35:
  3838                           	opt stack 0
  3839  00B888                     _command:
  3840                           	opt stack 23
  3841                           
  3842                           ;incstack = 0
  3843                           ;command@x stored from wreg
  3844  00B888  6E49               	movwf	command@x,c
  3845                           
  3846                           ;main.c: 152: PORTD = x;
  3847  00B88A  C049  FF83         	movff	command@x,3971	;volatile
  3848                           
  3849                           ;main.c: 153: PORTCbits.RC0 = 0;
  3850  00B88E  9082               	bcf	3970,0,c	;volatile
  3851                           
  3852                           ;main.c: 154: PORTCbits.RC1 = 0;
  3853  00B890  9282               	bcf	3970,1,c	;volatile
  3854                           
  3855                           ;main.c: 155: PORTCbits.RC2 = 1;
  3856  00B892  8482               	bsf	3970,2,c	;volatile
  3857                           
  3858                           ;main.c: 156: shortDelay();
  3859  00B894  EC2F  F05C         	call	_shortDelay	;wreg free
  3860                           
  3861                           ;main.c: 157: PORTCbits.RC2 = 0;
  3862  00B898  9482               	bcf	3970,2,c	;volatile
  3863  00B89A  0012               	return		;funcret
  3864  00B89C                     __end_of_command:
  3865                           	opt stack 0
  3866                           tblptru	equ	0xFF8
  3867                           tblptrh	equ	0xFF7
  3868                           tblptrl	equ	0xFF6
  3869                           tablat	equ	0xFF5
  3870                           prodh	equ	0xFF4
  3871                           prodl	equ	0xFF3
  3872                           intcon2	equ	0xFF1
  3873                           postinc0	equ	0xFEE
  3874                           postdec1	equ	0xFE5
  3875                           fsr1l	equ	0xFE1
  3876                           indf2	equ	0xFDF
  3877                           postinc2	equ	0xFDE
  3878                           fsr2h	equ	0xFDA
  3879                           fsr2l	equ	0xFD9
  3880                           status	equ	0xFD8
  3881                           
  3882 ;; *************** function _shortDelay *****************
  3883 ;; Defined at:
  3884 ;;		line 131 in file "main.c"
  3885 ;; Parameters:    Size  Location     Type
  3886 ;;		None
  3887 ;; Auto vars:     Size  Location     Type
  3888 ;;  L1REG           1    0[COMRAM] unsigned char 
  3889 ;; Return value:  Size  Location     Type
  3890 ;;                  1    wreg      void 
  3891 ;; Registers used:
  3892 ;;		wreg, status,2, status,0
  3893 ;; Tracked objects:
  3894 ;;		On entry : 0/0
  3895 ;;		On exit  : 0/0
  3896 ;;		Unchanged: 0/0
  3897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3899 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3901 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3902 ;;Total ram usage:        1 bytes
  3903 ;; Hardware stack levels used:    1
  3904 ;; This function calls:
  3905 ;;		Nothing
  3906 ;; This function is called by:
  3907 ;;		_command
  3908 ;;		_isReady
  3909 ;;		_displayCharOnLCD
  3910 ;;		_decode
  3911 ;; This function uses a non-reentrant model
  3912 ;;
  3913                           
  3914                           	psect	text36
  3915  00B85E                     __ptext36:
  3916                           	opt stack 0
  3917  00B85E                     _shortDelay:
  3918                           	opt stack 26
  3919                           
  3920                           ;main.c: 132: unsigned char L1REG = 2;
  3921                           
  3922                           ;incstack = 0
  3923  00B85E  0E02               	movlw	2
  3924  00B860  6E48               	movwf	shortDelay@L1REG,c
  3925  00B862                     l1588:
  3926  00B862  0648               	decf	shortDelay@L1REG,f,c
  3927  00B864  2848               	incf	shortDelay@L1REG,w,c
  3928  00B866  B4D8               	btfsc	status,2,c
  3929  00B868  0012               	return	
  3930  00B86A  D7FB               	goto	l1588
  3931  00B86C                     __end_of_shortDelay:
  3932                           	opt stack 0
  3933  0000                     tblptru	equ	0xFF8
  3934                           tblptrh	equ	0xFF7
  3935                           tblptrl	equ	0xFF6
  3936                           tablat	equ	0xFF5
  3937                           prodh	equ	0xFF4
  3938                           prodl	equ	0xFF3
  3939                           intcon2	equ	0xFF1
  3940                           postinc0	equ	0xFEE
  3941                           postdec1	equ	0xFE5
  3942                           fsr1l	equ	0xFE1
  3943                           indf2	equ	0xFDF
  3944                           postinc2	equ	0xFDE
  3945                           fsr2h	equ	0xFDA
  3946                           fsr2l	equ	0xFD9
  3947                           status	equ	0xFD8
  3948                           tblptru	equ	0xFF8
  3949                           tblptrh	equ	0xFF7
  3950                           tblptrl	equ	0xFF6
  3951                           tablat	equ	0xFF5
  3952                           prodh	equ	0xFF4
  3953                           prodl	equ	0xFF3
  3954                           intcon2	equ	0xFF1
  3955                           postinc0	equ	0xFEE
  3956                           postdec1	equ	0xFE5
  3957                           fsr1l	equ	0xFE1
  3958                           indf2	equ	0xFDF
  3959                           postinc2	equ	0xFDE
  3960                           fsr2h	equ	0xFDA
  3961                           fsr2l	equ	0xFD9
  3962                           status	equ	0xFD8
  3963                           
  3964                           	psect	rparam
  3965  0000                     tblptru	equ	0xFF8
  3966                           tblptrh	equ	0xFF7
  3967                           tblptrl	equ	0xFF6
  3968                           tablat	equ	0xFF5
  3969                           prodh	equ	0xFF4
  3970                           prodl	equ	0xFF3
  3971                           intcon2	equ	0xFF1
  3972                           postinc0	equ	0xFEE
  3973                           postdec1	equ	0xFE5
  3974                           fsr1l	equ	0xFE1
  3975                           indf2	equ	0xFDF
  3976                           postinc2	equ	0xFDE
  3977                           fsr2h	equ	0xFDA
  3978                           fsr2l	equ	0xFD9
  3979                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        114
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     12      88
    BANK0           160      0      43
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 10
		 -> SOSMorse(BANK0[10]), ceroMorse(COMRAM[7]), nueveMorse(COMRAM[7]), ochoMorse(COMRAM[7]), 
		 -> sieteMorse(COMRAM[7]), seisMorse(COMRAM[7]), cincoMorse(COMRAM[7]), cuatroMorse(COMRAM[7]), 
		 -> tresMorse(BANK0[9]), dosMorse(COMRAM[7]), unoMorse(COMRAM[9]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 10
		 -> SOSMorse(BANK0[10]), ceroMorse(COMRAM[7]), nueveMorse(COMRAM[7]), ochoMorse(COMRAM[7]), 
		 -> sieteMorse(COMRAM[7]), seisMorse(COMRAM[7]), cincoMorse(COMRAM[7]), cuatroMorse(COMRAM[7]), 
		 -> tresMorse(BANK0[9]), dosMorse(COMRAM[7]), unoMorse(COMRAM[9]), 

    decode@caracter	PTR unsigned char  size(2) Largest target is 10
		 -> SOSMorse(BANK0[10]), ceroMorse(COMRAM[7]), nueveMorse(COMRAM[7]), ochoMorse(COMRAM[7]), 
		 -> sieteMorse(COMRAM[7]), seisMorse(COMRAM[7]), cincoMorse(COMRAM[7]), cuatroMorse(COMRAM[7]), 
		 -> tresMorse(BANK0[9]), dosMorse(COMRAM[7]), unoMorse(COMRAM[9]), 

    displayLineOnLCD@array	PTR unsigned char  size(2) Largest target is 4
		 -> SOS(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _resetOneShot->_delay
    _pressedKey->_pressedKeyAction
    _displayZero->_decode
    _displayTwo->_decode
    _displayThree->_decode
    _displaySix->_decode
    _displaySeven->_decode
    _displaySOS->_decode
    _displayLineOnLCD->_displayCharOnLCD
    _displayOne->_decode
    _displayNine->_decode
    _displayFour->_decode
    _displayFive->_decode
    _displayEight->_decode
    _decode->_strlen
    _displayCharOnLCD->_shortDelay
    _checkDDRAM->_command
    _buzzerShort->_shortBuzzerDelay
    _buzzerLong->_longBuzzerDelay
    _buzzerLong->_shortBuzzerDelay
    _LCDSetup->_longDelay
    _isReady->_shortDelay
    _command->_shortDelay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   15631
                           _LCDSetup
                      _groundAllRows
                            _oneShot
                      _portDAsOutput
                       _resetOneShot
 ---------------------------------------------------------------------------------
 (1) _resetOneShot                                         0     0      0      30
                              _delay
 ---------------------------------------------------------------------------------
 (1) _oneShot                                              0     0      0   15488
                              _delay
                         _pressedKey
 ---------------------------------------------------------------------------------
 (2) _pressedKey                                           0     0      0   15458
                _determinePressedRow
                         _getKeyCode
                   _pressedKeyAction
 ---------------------------------------------------------------------------------
 (3) _pressedKeyAction                                     1     1      0   15413
                                             11 COMRAM     1     1      0
                            _command
                   _displayCharOnLCD
                       _displayEight
                        _displayFive
                        _displayFour
                        _displayNine
                         _displayOne
                         _displaySOS
                       _displaySeven
                         _displaySix
                       _displayThree
                         _displayTwo
                        _displayZero
                            _isReady
 ---------------------------------------------------------------------------------
 (4) _displayZero                                          0     0      0    1363
                             _decode
                   _displayCharOnLCD
 ---------------------------------------------------------------------------------
 (4) _displayTwo                                           0     0      0    1363
                             _decode
                   _displayCharOnLCD
 ---------------------------------------------------------------------------------
 (4) _displayThree                                         0     0      0    1363
                             _decode
                   _displayCharOnLCD
 ---------------------------------------------------------------------------------
 (4) _displaySix                                           0     0      0    1363
                             _decode
                   _displayCharOnLCD
 ---------------------------------------------------------------------------------
 (4) _displaySeven                                         0     0      0    1363
                             _decode
                   _displayCharOnLCD
 ---------------------------------------------------------------------------------
 (4) _displaySOS                                           0     0      0    1626
                         _checkDDRAM
                             _decode
                   _displayLineOnLCD
 ---------------------------------------------------------------------------------
 (5) _displayLineOnLCD                                     4     1      3     263
                                              2 COMRAM     4     1      3
                   _displayCharOnLCD
 ---------------------------------------------------------------------------------
 (4) _displayOne                                           0     0      0    1363
                             _decode
                   _displayCharOnLCD
 ---------------------------------------------------------------------------------
 (4) _displayNine                                          0     0      0    1363
                             _decode
                   _displayCharOnLCD
 ---------------------------------------------------------------------------------
 (4) _displayFour                                          0     0      0    1363
                             _decode
                   _displayCharOnLCD
 ---------------------------------------------------------------------------------
 (4) _displayFive                                          0     0      0    1363
                             _decode
                   _displayCharOnLCD
 ---------------------------------------------------------------------------------
 (4) _displayEight                                         0     0      0    1363
                             _decode
                   _displayCharOnLCD
 ---------------------------------------------------------------------------------
 (5) _decode                                               5     3      2    1318
                                              6 COMRAM     5     3      2
                         _buzzerLong
                        _buzzerShort
                         _checkDDRAM
                   _displayCharOnLCD
                         _shortDelay
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               6     4      2     154
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _displayCharOnLCD                                     1     1      0      45
                                              1 COMRAM     1     1      0
                         _shortDelay
 ---------------------------------------------------------------------------------
 (6) _checkDDRAM                                           0     0      0      45
                            _command
 ---------------------------------------------------------------------------------
 (6) _buzzerShort                                          0     0      0      71
                   _shortBuzzerDelay
 ---------------------------------------------------------------------------------
 (6) _buzzerLong                                           0     0      0     142
                    _longBuzzerDelay
                   _shortBuzzerDelay
 ---------------------------------------------------------------------------------
 (7) _shortBuzzerDelay                                     4     4      0      71
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (7) _longBuzzerDelay                                      4     4      0      71
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (3) _getKeyCode                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _determinePressedRow                                  1     1      0      45
                                              0 COMRAM     1     1      0
                      _turnOnAllRows
 ---------------------------------------------------------------------------------
 (4) _turnOnAllRows                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _delay                                                3     3      0      30
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _groundAllRows                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDSetup                                             0     0      0     113
                            _command
                            _isReady
                          _longDelay
 ---------------------------------------------------------------------------------
 (2) _longDelay                                            3     3      0      45
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _isReady                                              0     0      0      23
                       _portDAsInput
                      _portDAsOutput
                         _shortDelay
 ---------------------------------------------------------------------------------
 (1) _portDAsOutput                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _portDAsInput                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _command                                              1     1      0      45
                                              1 COMRAM     1     1      0
                         _shortDelay
 ---------------------------------------------------------------------------------
 (5) _shortDelay                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDSetup
     _command
       _shortDelay
     _isReady
       _portDAsInput
       _portDAsOutput
       _shortDelay
     _longDelay
   _groundAllRows
   _oneShot
     _delay
     _pressedKey
       _determinePressedRow
         _turnOnAllRows
       _getKeyCode
       _pressedKeyAction
         _command
           _shortDelay
         _displayCharOnLCD
           _shortDelay
         _displayEight
           _decode
             _buzzerLong
               _longBuzzerDelay
               _shortBuzzerDelay
             _buzzerShort
               _shortBuzzerDelay
             _checkDDRAM
               _command
                 _shortDelay
             _displayCharOnLCD
               _shortDelay
             _shortDelay
             _strlen
           _displayCharOnLCD
             _shortDelay
         _displayFive
           _decode
             _buzzerLong
               _longBuzzerDelay
               _shortBuzzerDelay
             _buzzerShort
               _shortBuzzerDelay
             _checkDDRAM
               _command
                 _shortDelay
             _displayCharOnLCD
               _shortDelay
             _shortDelay
             _strlen
           _displayCharOnLCD
             _shortDelay
         _displayFour
           _decode
             _buzzerLong
               _longBuzzerDelay
               _shortBuzzerDelay
             _buzzerShort
               _shortBuzzerDelay
             _checkDDRAM
               _command
                 _shortDelay
             _displayCharOnLCD
               _shortDelay
             _shortDelay
             _strlen
           _displayCharOnLCD
             _shortDelay
         _displayNine
           _decode
             _buzzerLong
               _longBuzzerDelay
               _shortBuzzerDelay
             _buzzerShort
               _shortBuzzerDelay
             _checkDDRAM
               _command
                 _shortDelay
             _displayCharOnLCD
               _shortDelay
             _shortDelay
             _strlen
           _displayCharOnLCD
             _shortDelay
         _displayOne
           _decode
             _buzzerLong
               _longBuzzerDelay
               _shortBuzzerDelay
             _buzzerShort
               _shortBuzzerDelay
             _checkDDRAM
               _command
                 _shortDelay
             _displayCharOnLCD
               _shortDelay
             _shortDelay
             _strlen
           _displayCharOnLCD
             _shortDelay
         _displaySOS
           _checkDDRAM
             _command
               _shortDelay
           _decode
             _buzzerLong
               _longBuzzerDelay
               _shortBuzzerDelay
             _buzzerShort
               _shortBuzzerDelay
             _checkDDRAM
               _command
                 _shortDelay
             _displayCharOnLCD
               _shortDelay
             _shortDelay
             _strlen
           _displayLineOnLCD
             _displayCharOnLCD
               _shortDelay
         _displaySeven
           _decode
             _buzzerLong
               _longBuzzerDelay
               _shortBuzzerDelay
             _buzzerShort
               _shortBuzzerDelay
             _checkDDRAM
               _command
                 _shortDelay
             _displayCharOnLCD
               _shortDelay
             _shortDelay
             _strlen
           _displayCharOnLCD
             _shortDelay
         _displaySix
           _decode
             _buzzerLong
               _longBuzzerDelay
               _shortBuzzerDelay
             _buzzerShort
               _shortBuzzerDelay
             _checkDDRAM
               _command
                 _shortDelay
             _displayCharOnLCD
               _shortDelay
             _shortDelay
             _strlen
           _displayCharOnLCD
             _shortDelay
         _displayThree
           _decode
             _buzzerLong
               _longBuzzerDelay
               _shortBuzzerDelay
             _buzzerShort
               _shortBuzzerDelay
             _checkDDRAM
               _command
                 _shortDelay
             _displayCharOnLCD
               _shortDelay
             _shortDelay
             _strlen
           _displayCharOnLCD
             _shortDelay
         _displayTwo
           _decode
             _buzzerLong
               _longBuzzerDelay
               _shortBuzzerDelay
             _buzzerShort
               _shortBuzzerDelay
             _checkDDRAM
               _command
                 _shortDelay
             _displayCharOnLCD
               _shortDelay
             _shortDelay
             _strlen
           _displayCharOnLCD
             _shortDelay
         _displayZero
           _decode
             _buzzerLong
               _longBuzzerDelay
               _shortBuzzerDelay
             _buzzerShort
               _shortBuzzerDelay
             _checkDDRAM
               _command
                 _shortDelay
             _displayCharOnLCD
               _shortDelay
             _shortDelay
             _strlen
           _displayCharOnLCD
             _shortDelay
         _isReady
           _portDAsInput
           _portDAsOutput
           _shortDelay
   _portDAsOutput
   _resetOneShot
     _delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             CFF      0       0      31        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      2B       5       26.9%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      C      58       1       92.6%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      83      20        0.0%
DATA                 0      0      83       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Wed May 11 19:17:34 2016

             shortDelay@L1REG 0048                  ?_displayFive 0048                  ?_displayFour 0048  
                ?_displayNine 0048                  ?_displayZero 0048                            l91 BA92  
               ?_displayEight 0048                 ?_displaySeven 0048                 ?_displayThree 0048  
                         l104 B99C                           l216 B9B8                           l241 BF66  
                         l236 BF28                           l229 BEE8                           l246 BFA4  
                         l362 BD32                           _SOS 0044              ?_longBuzzerDelay 0048  
                __CFG_LVP$OFF 000000                  __CFG_WDT$OFF 000000                          l1220 BEDA  
                        l1224 BEE2                          l1330 BFB4                          l1314 BF96  
                        l1306 BF86                          l1250 BF18                          l1242 BF08  
                        l1234 BEF8                          l1402 BE48                          l1410 BE68  
                        l1500 BA94                          l1502 BA9C                          l1510 B9BC  
                        l1422 BE7A                          l1414 BE72                          l1504 BAA4  
                        l1432 BE82                          l1408 BE4C                          l1346 BFD4  
                        l1338 BFC4                          l1282 BF58                          l1274 BF48  
                        l1266 BF38                          l1450 BEB4                          l1442 BEAC  
                        l1426 BE7E                          l1418 BE76                          l1434 BE9E  
                        l1370 BE0A                          l1610 BB7A                          l1508 B9B4  
                        l1356 BFE2                          l1620 BB30                          l1604 BB64  
                        l1612 BB86                          l1358 BFFC                          l1446 BEB0  
                        l1438 BEA8                          l1390 BE3C                          l1374 BE0E  
                        l1366 BE06                          l1622 BB3C                          l1606 BB6A  
                        l1456 BEB8                          l1384 BE16                          l1616 BB26  
                        l1624 BB48                          l1608 BB6E                          l1704 BD34  
                        l1298 BF76                          l1394 BE40                          l1458 BED2  
                        l1378 BE12                          l1386 BE32                          l1618 BB2C  
                        l1802 BDA4                          l1810 BB96                          l1716 B9A4  
                        l1804 BDAA                          l1812 BB9A                          l1820 BBAC  
                        l1398 BE44                          l1654 B9F4                          l1662 BAE8  
                        l1806 BDB2                          l1814 BB9E                          l1822 BBC8  
                        l1664 BAEC                          l1672 BA32                          l1816 BBA2  
                        l1498 BA8C                          l1818 BBA6                          l1588 B862  
                        l1676 BA4A                          l1780 BD5E                          l1790 BD7C  
                        l1782 BD64                          l1862 BC58                          l1696 BD0A  
                        l1688 BCE2                          l1792 BD82                          l1784 BD6A  
                        l1794 BD88                          l1786 BD70                          l1778 BD58  
                        l1796 BD8E                          l1788 BD76                          l1798 BD94  
                        _LATB 000F8A                          _LATC 000F8B                          _main BC22  
                        fsr2h 000FDA                          fsr1l 000FE1                          indf2 000FDF  
                        fsr2l 000FD9                          prodh 000FF4                          prodl 000FF3  
                        start 0000         displayLineOnLCD@array 004A                 __CFG_MCLRE$ON 000000  
                ___param_bank 000010                _columnSelected 0055                ??_displayEight 0053  
            __end_of_LCDSetup BA2C                ??_displaySeven 0053                ??_displayThree 0053  
              longDelay@L1REG 0048                longDelay@L2REG 0049                longDelay@L3REG 004A  
                       ?_main 0048                         _CMCON 000FB4                         _PORTB 000F81  
                       _PORTC 000F82                         _PORTD 000F83                         _TRISB 000F93  
                       _TRISC 000F94                         _TRISD 000F95               __end_of_command B89C  
             __end_of_isReady B9AE                         _delay B9AE               __end_of_oneShot B9E6  
                       tablat 000FF5                         status 000FD8                  ?_buzzerShort 0048  
 __end_of_determinePressedRow C000              _pressedKeyAction BD54               __initialization BC72  
                __end_of_main BC72                        ??_main 0054              _shortBuzzerDelay BB56  
               __activetblptr 000002                        ?_delay 0048                        _ADCON1 000FC1  
                      _OSCCON 000FD3        __size_of_turnOnAllRows 000A                  _DDRAMAddress 0054  
                      _decode BCC6          __size_of_displayFive 0014          __size_of_displayFour 0014  
        __size_of_displayNine 0014          __size_of_displayZero 0014                     ??_command 0049  
                      _strlen BADE                     ??_isReady 0049             ?_displayCharOnLCD 0048  
                __pdataCOMRAM 0001                     ??_oneShot 0054            ??_displayCharOnLCD 0049  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
        __end_of_displayEight B8C4                    __accesstop 0060       __end_of__initialization BCBC  
        __end_of_displaySeven B928               __CFG_PBADEN$OFF 000000          __end_of_displayThree B950  
                   ?_LCDSetup 0048                 ___rparam_used 000001             ?_displayLineOnLCD 004A  
              __pcstackCOMRAM 0048                  __pidataBANK0 BA55                 __end_of_delay B9CA  
          ??_displayLineOnLCD 004D                 _turnOnAllRows B854         __end_of_portDAsOutput B84A  
                  _checkDDRAM B9E6                       ??_delay 0048                    ??_LCDSetup 004B  
      __size_of_groundAllRows 000A            __size_of_longDelay 002E          __size_of_buzzerShort 000E  
                  _cincoMorse 0013                    _getKeyCode BDFE                       ?_decode 004E  
              ?_turnOnAllRows 0048                       ?_strlen 0048      __end_of_pressedKeyAction BDFE  
                  _displaySOS BAAE                    _displayOne B900                    _displaySix B928  
                  _displayTwo B950                 ?_resetOneShot 0048      __size_of_longBuzzerDelay 003E  
           displayLineOnLCD@i 004D      __end_of_shortBuzzerDelay BB94     displayCharOnLCD@character 0049  
                     __Hparam 0000                       __Lparam 0000                    delay@L1REG 0049  
                  delay@L2REG 004A               __size_of_decode 008E                 ?_portDAsInput 0048  
                     __pcinit BC72                       __ramtop 0D00          determinePressedRow@i 0048  
                     __ptext0 BC22                       __ptext1 B978                       __ptext2 B9CA  
                     __ptext3 BB94                       __ptext4 BD54                       __ptext5 B964  
                     __ptext6 B950                       __ptext7 B93C                       __ptext8 B928  
                     __ptext9 B914                       _command B888                       _isReady B992  
                     _keyCode 0056               __size_of_strlen 003A                 _groundAllRows B84A  
                     decode@i 0052                    _buzzerLong B86C                       _oneShot B9CA  
                 ?_checkDDRAM 0048             __end_of_longDelay BAAE         __size_of_displayEight 0014  
              ??_resetOneShot 004B                       _unoSize 0002         __size_of_displaySeven 0014  
       __size_of_displayThree 0014          end_of_initialization BCBC                 __Lmediumconst 0000  
                  _sieteMorse 003D                decode@caracter 004E                       postdec1 000FE5  
                     postinc0 000FEE                       postinc2 000FDE                   ?_getKeyCode 0048  
              ??_portDAsInput 0048                    _nueveMorse 0028               ??_turnOnAllRows 0048  
__size_of_determinePressedRow 012A                       strlen@s 0048                    _shortDelay B85E  
                _displayEight B8B0                     _PORTBbits 000F81                     _PORTCbits 000F82  
                   _PORTDbits 000F83                    _pressedKey BB94                  _displaySeven B914  
                _displayThree B93C                ?_groundAllRows 0048                     _TRISBbits 000F93  
                 ?_displaySOS 0048                   ?_displayOne 0048                   ?_displaySix 0048  
                 ?_displayTwo 0048     __size_of_displayCharOnLCD 0014             ??_longBuzzerDelay 0048  
           __size_of_LCDSetup 0026           __size_of_checkDDRAM 0020                 ??_displayFive 0053  
               ??_displayFour 0053                 ??_displayNine 0053                 ??_displayZero 0053  
              __end_of_decode BD54                 __pidataCOMRAM BBDB                   ?_buzzerLong 0048  
              __end_of_strlen BB18           start_initialization BC72     __size_of_displayLineOnLCD 0028  
         __size_of_getKeyCode 00D8              __CFG_OSC$IRCIO67 000000          __end_of_resetOneShot B992  
                    ??_decode 0050           __size_of_displaySOS 0030           __size_of_displayOne 0014  
         __size_of_displaySix 0014           __size_of_displayTwo 0014                   __pdataBANK0 0060  
             ??_groundAllRows 0048                   ?_shortDelay 0048                   ?_pressedKey 0048  
                    ??_strlen 004A           __end_of_displayFive B8D8           __end_of_displayFour B8EC  
         __end_of_displayNine B900           __end_of_displayZero B978                   __pbssCOMRAM 0054  
           ?_pressedKeyAction 0048            ??_pressedKeyAction 0053          __end_of_portDAsInput B844  
               ??_buzzerShort 004C             ?_shortBuzzerDelay 0048            ??_shortBuzzerDelay 0048  
         __size_of_buzzerLong 000E                     _ceroMorse 000C        __size_of_portDAsOutput 0006  
                    ?_command 0048                      ?_isReady 0048                      ?_oneShot 0048  
                ??_checkDDRAM 004A                      _CASTELLO 0060                     _ochoMorse 002F  
              __size_of_delay 001C           _determinePressedRow BED6                     _longDelay BA80  
                    _GREETING 006C              _displayCharOnLCD B89C                      _LCDSetup BA06  
         __size_of_shortDelay 000E           __size_of_pressedKey 0046                     _seisMorse 0036  
                ??_getKeyCode 0048           __end_of_buzzerShort B888            __end_of_checkDDRAM BA06  
                 _displayFive B8C4                   _displayFour B8D8                   _displayNine B8EC  
        ?_determinePressedRow 0048                   _displayZero B964                     _tresMorse 0082  
                    _SOSMorse 0078              _displayLineOnLCD BA2C                   _cuatroMorse 001A  
               _portDAsOutput B844                  ??_displaySOS 0053                  ??_displayOne 0053  
                ??_displaySix 0053                  ??_displayTwo 0053               _longBuzzerDelay BB18  
                 _INTCON2bits 000FF1                     copy_data0 BC90                     copy_data1 BCB0  
                  ?_longDelay 0048            __end_of_getKeyCode BED6         __size_of_resetOneShot 001A  
                    __Hrparam 0000                      __Lrparam 0000         ??_determinePressedRow 0048  
          __end_of_displaySOS BADE            __end_of_displayOne B914            __end_of_displaySix B93C  
          __end_of_displayTwo B964         __end_of_turnOnAllRows B85E              __size_of_command 0014  
            __size_of_isReady 001C                  ??_buzzerLong 004C                ?_portDAsOutput 0048  
       __size_of_portDAsInput 0004              __size_of_oneShot 001C                      __ptext10 BAAE  
                    __ptext11 BA2C                      __ptext20 B9E6                      __ptext12 B900  
                    __ptext21 B87A                      __ptext13 B8EC                      __ptext30 BA06  
                    __ptext22 B86C                      __ptext14 B8D8                      __ptext31 BA80  
                    __ptext23 BB56                      __ptext15 B8C4                      __ptext32 B992  
                    __ptext24 BB18                      __ptext16 B8B0                      __ptext33 B844  
                    __ptext25 BDFE                      __ptext17 BCC6                      __ptext34 B840  
                    __ptext26 BED6                      __ptext18 BADE                      __ptext35 B888  
                    __ptext27 B854                      __ptext19 B89C                      __ptext36 B85E  
                    __ptext28 B9AE                      __ptext29 B84A                  _resetOneShot B978  
                    _dosMorse 0021                   _oneShotFlag 0057                 __size_of_main 0050  
                 _buzzerShort B87A            __end_of_buzzerLong B87A                    _CVRCONbits 000FB5  
                    _unoMorse 0003                      _tresSize 0001                      command@x 0049  
                _portDAsInput B840                  ??_shortDelay 0048                  ??_pressedKey 0054  
     __end_of_longBuzzerDelay BB56         shortBuzzerDelay@L1REG 004A         shortBuzzerDelay@L2REG 004B  
       shortBuzzerDelay@L3REG 0049   displayLineOnLCD@sizeOfArray 004C                   ??_longDelay 0048  
          __end_of_shortDelay B86C     __size_of_pressedKeyAction 00AA            __end_of_pressedKey BBDA  
     pressedKeyAction@keyCode 0053          longBuzzerDelay@L1REG 004A          longBuzzerDelay@L2REG 004B  
        longBuzzerDelay@L3REG 0049      __end_of_displayCharOnLCD B8B0     __size_of_shortBuzzerDelay 003E  
       __end_of_groundAllRows B854               ??_portDAsOutput 0048                      strlen@cp 004C  
                 _rowSelected 0058      __end_of_displayLineOnLCD BA54  
